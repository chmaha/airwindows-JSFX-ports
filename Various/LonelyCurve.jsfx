Version: 1.0
desc:LonelyCurve EQ (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "BiquadStack" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/BiquadStack (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Frequency
slider2:0.5<0,1,0.01>Amount
slider3:0.5<0,1,0.01>Bandwidth

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
biqs = freemem; freemem += 49;

biqs_freq = 0; biqs_reso = 1; biqs_level = 2; biqs_levelA = 3;
biqs_levelB = 4; biqs_nonlin = 5; biqs_temp = 6; biqs_dis = 7;
biqs_a0 = 8; biqs_aA0 = 9; biqs_aB0 = 10; biqs_b1 = 11; biqs_bA1 = 12;
biqs_bB1 = 13; biqs_b2 = 14; biqs_bA2 = 15; biqs_bB2 = 16;
biqs_c0 = 17; biqs_cA0 = 18; biqs_cB0 = 19; biqs_d1 = 20; biqs_dA1 = 21;
biqs_dB1 = 22; biqs_d2 = 23; biqs_dA2 = 24; biqs_dB2 = 25;
biqs_e0 = 26; biqs_eA0 = 27; biqs_eB0 = 28; biqs_f1 = 29; biqs_fA1 = 30;
biqs_fB1 = 31; biqs_f2 = 32; biqs_fA2 = 33; biqs_fB2 = 34;
biqs_aL1 = 35; biqs_aL2 = 36; biqs_aR1 = 37; biqs_aR2 = 38;
biqs_cL1 = 39; biqs_cL2 = 40; biqs_cR1 = 41; biqs_cR2 = 42;
biqs_eL1 = 43; biqs_eL2 = 44; biqs_eR1 = 45; biqs_eR2 = 46;
biqs_outL = 47; biqs_outR = 48;


@slider

A = slider1;
B = slider2;
C = slider3;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

biqs[biqs_levelA] = biqs[biqs_levelB];
biqs[biqs_aA0] = biqs[biqs_aB0];
biqs[biqs_bA1] = biqs[biqs_bB1];
biqs[biqs_bA2] = biqs[biqs_bB2];
biqs[biqs_cA0] = biqs[biqs_cB0];
biqs[biqs_dA1] = biqs[biqs_dB1];
biqs[biqs_dA2] = biqs[biqs_dB2];
biqs[biqs_eA0] = biqs[biqs_eB0];
biqs[biqs_fA1] = biqs[biqs_fB1];
biqs[biqs_fA2] = biqs[biqs_fB2];

biqs[biqs_freq] = (((pow(A,4)*19980.0)+20.0)/srate);
biqs[biqs_nonlin] = B;
biqs[biqs_levelB] = (biqs[biqs_nonlin]*2.0)-1.0;
(biqs[biqs_levelB] > 0.0) ? biqs[biqs_levelB] *= 2.0;
biqs[biqs_reso] = ((0.5+(biqs[biqs_nonlin]*0.5)+sqrt(biqs[biqs_freq]))-(1.0-pow(1.0-C,2.0)))+0.5+(biqs[biqs_nonlin]*0.5);

K = tan($pi * biqs[biqs_freq]);
norm = 1.0 / (1.0 + K / (biqs[biqs_reso]*1.93185165) + K * K);
biqs[biqs_aB0] = K / (biqs[biqs_reso]*1.93185165) * norm;
biqs[biqs_bB1] = 2.0 * (K * K - 1.0) * norm;
biqs[biqs_bB2] = (1.0 - K / (biqs[biqs_reso]*1.93185165) + K * K) * norm;
norm = 1.0 / (1.0 + K / (biqs[biqs_reso]*0.70710678) + K * K);
biqs[biqs_cB0] = K / (biqs[biqs_reso]*0.70710678) * norm;
biqs[biqs_dB1] = 2.0 * (K * K - 1.0) * norm;
biqs[biqs_dB2] = (1.0 - K / (biqs[biqs_reso]*0.70710678) + K * K) * norm;
norm = 1.0 / (1.0 + K / (biqs[biqs_reso]*0.51763809) + K * K);
biqs[biqs_eB0] = K / (biqs[biqs_reso]*0.51763809) * norm;
biqs[biqs_fB1] = 2.0 * (K * K - 1.0) * norm;
biqs[biqs_fB2] = (1.0 - K / (biqs[biqs_reso]*0.51763809) + K * K) * norm;

(biqs[biqs_aA0] == 0.0) ? (
    biqs[biqs_levelA] = biqs[biqs_levelB];
    biqs[biqs_aA0] = biqs[biqs_aB0];
    biqs[biqs_bA1] = biqs[biqs_bB1];
    biqs[biqs_bA2] = biqs[biqs_bB2];
    biqs[biqs_cA0] = biqs[biqs_cB0];
    biqs[biqs_dA1] = biqs[biqs_dB1];
    biqs[biqs_dA2] = biqs[biqs_dB2];
    biqs[biqs_eA0] = biqs[biqs_eB0];
    biqs[biqs_fA1] = biqs[biqs_fB1];
    biqs[biqs_fA2] = biqs[biqs_fB2];
);

sample_index = 0;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

sample_index += 1;
samples_left = samplesblock - sample_index;
buf = samples_left/samplesblock;

biqs[biqs_level] = (biqs[biqs_levelA]*buf)+(biqs[biqs_levelB]*(1.0-buf));
biqs[biqs_a0] = (biqs[biqs_aA0]*buf)+(biqs[biqs_aB0]*(1.0-buf));
biqs[biqs_b1] = (biqs[biqs_bA1]*buf)+(biqs[biqs_bB1]*(1.0-buf));
biqs[biqs_b2] = (biqs[biqs_bA2]*buf)+(biqs[biqs_bB2]*(1.0-buf));
biqs[biqs_c0] = (biqs[biqs_cA0]*buf)+(biqs[biqs_cB0]*(1.0-buf));
biqs[biqs_d1] = (biqs[biqs_dA1]*buf)+(biqs[biqs_dB1]*(1.0-buf));
biqs[biqs_d2] = (biqs[biqs_dA2]*buf)+(biqs[biqs_dB2]*(1.0-buf));
biqs[biqs_e0] = (biqs[biqs_eA0]*buf)+(biqs[biqs_eB0]*(1.0-buf));
biqs[biqs_f1] = (biqs[biqs_fA1]*buf)+(biqs[biqs_fB1]*(1.0-buf));
biqs[biqs_f2] = (biqs[biqs_fA2]*buf)+(biqs[biqs_fB2]*(1.0-buf));
    
biqs[biqs_outL] = inputSampleL * abs(biqs[biqs_level]);
biqs[biqs_dis] = abs(biqs[biqs_a0] * (1.0+(biqs[biqs_outL]*biqs[biqs_nonlin])));
(biqs[biqs_dis] > 1.0) ? biqs[biqs_dis] = 1.0;
biqs[biqs_temp] = (biqs[biqs_outL] * biqs[biqs_dis]) + biqs[biqs_aL1];
biqs[biqs_aL1] = biqs[biqs_aL2] - (biqs[biqs_temp]*biqs[biqs_b1]);
biqs[biqs_aL2] = (biqs[biqs_outL] * -biqs[biqs_dis]) - (biqs[biqs_temp]*biqs[biqs_b2]);
biqs[biqs_outL] = biqs[biqs_temp];
biqs[biqs_dis] = abs(biqs[biqs_c0] * (1.0+(biqs[biqs_outL]*biqs[biqs_nonlin])));
(biqs[biqs_dis] > 1.0) ? biqs[biqs_dis] = 1.0;
biqs[biqs_temp] = (biqs[biqs_outL] * biqs[biqs_dis]) + biqs[biqs_cL1];
biqs[biqs_cL1] = biqs[biqs_cL2] - (biqs[biqs_temp]*biqs[biqs_d1]);
biqs[biqs_cL2] = (biqs[biqs_outL] * -biqs[biqs_dis]) - (biqs[biqs_temp]*biqs[biqs_d2]);
biqs[biqs_outL] = biqs[biqs_temp];
biqs[biqs_dis] = abs(biqs[biqs_e0] * (1.0+(biqs[biqs_outL]*biqs[biqs_nonlin])));
(biqs[biqs_dis] > 1.0) ? biqs[biqs_dis] = 1.0;
biqs[biqs_temp] = (biqs[biqs_outL] * biqs[biqs_dis]) + biqs[biqs_eL1];
biqs[biqs_eL1] = biqs[biqs_eL2] - (biqs[biqs_temp]*biqs[biqs_f1]);
biqs[biqs_eL2] = (biqs[biqs_outL] * -biqs[biqs_dis]) - (biqs[biqs_temp]*biqs[biqs_f2]);
biqs[biqs_outL] = biqs[biqs_temp];
biqs[biqs_outL] *= biqs[biqs_level];
(biqs[biqs_level] > 1.0) ? biqs[biqs_outL] *= biqs[biqs_level];

biqs[biqs_outR] = inputSampleR * abs(biqs[biqs_level]);
biqs[biqs_dis] = abs(biqs[biqs_a0] * (1.0+(biqs[biqs_outR]*biqs[biqs_nonlin])));
(biqs[biqs_dis] > 1.0) ? biqs[biqs_dis] = 1.0;
biqs[biqs_temp] = (biqs[biqs_outR] * biqs[biqs_dis]) + biqs[biqs_aR1];
biqs[biqs_aR1] = biqs[biqs_aR2] - (biqs[biqs_temp]*biqs[biqs_b1]);
biqs[biqs_aR2] = (biqs[biqs_outR] * -biqs[biqs_dis]) - (biqs[biqs_temp]*biqs[biqs_b2]);
biqs[biqs_outR] = biqs[biqs_temp];
biqs[biqs_dis] = abs(biqs[biqs_c0] * (1.0+(biqs[biqs_outR]*biqs[biqs_nonlin])));
(biqs[biqs_dis] > 1.0) ? biqs[biqs_dis] = 1.0;
biqs[biqs_temp] = (biqs[biqs_outR] * biqs[biqs_dis]) + biqs[biqs_cR1];
biqs[biqs_cR1] = biqs[biqs_cR2] - (biqs[biqs_temp]*biqs[biqs_d1]);
biqs[biqs_cR2] = (biqs[biqs_outR] * -biqs[biqs_dis]) - (biqs[biqs_temp]*biqs[biqs_d2]);
biqs[biqs_outR] = biqs[biqs_temp];
biqs[biqs_dis] = abs(biqs[biqs_e0] * (1.0+(biqs[biqs_outR]*biqs[biqs_nonlin])));
(biqs[biqs_dis] > 1.0) ? biqs[biqs_dis] = 1.0;
biqs[biqs_temp] = (biqs[biqs_outR] * biqs[biqs_dis]) + biqs[biqs_eR1];
biqs[biqs_eR1] = biqs[biqs_eR2] - (biqs[biqs_temp]*biqs[biqs_f1]);
biqs[biqs_eR2] = (biqs[biqs_outR] * -biqs[biqs_dis]) - (biqs[biqs_temp]*biqs[biqs_f2]);
biqs[biqs_outR] = biqs[biqs_temp];
biqs[biqs_outR] *= biqs[biqs_level];
(biqs[biqs_level] > 1.0) ? biqs[biqs_outR] *= biqs[biqs_level];

inputSampleL += biqs[biqs_outL];
inputSampleR += biqs[biqs_outR];

spl0 = inputSampleL;
spl1 = inputSampleR;
