version: 1.0
desc:Lucidity Dither (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "SpatializeDither" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/SpatializeDither (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,1,1{16-bit,24-bit>Bitdepth

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

UINT32_MAX = 4294967295;

randyConstant = 1.14357643574389; // strangely needs to be lower than airwindows to match volume
omegaConstant = 0.56714329040978387299996866221035554975381578718651;
expConstant = 0.06598803584531253707679018759684642493857704825279;

@slider

A = slider1;

@block

(A == 1) ? scaleFactor = 8388608.0 : scaleFactor = 32768.0;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

inputSampleL *= scaleFactor;
inputSampleR *= scaleFactor;

(inputSampleL > 0) ? inputSampleL += 0.383;
(inputSampleL < 0) ? inputSampleL -= 0.383;
(inputSampleR > 0) ? inputSampleR += 0.383;
(inputSampleR < 0) ? inputSampleR -= 0.383;

fpdL = rand(UINT32_MAX);
contingentRnd = (fpdL/UINT32_MAX);
contingentRnd += ((fpdL/UINT32_MAX)-1.0);
contingentRnd *= randyConstant; 
contingentRnd -= contingentErrL*omegaConstant; 
absSample = abs(inputSampleL);
contingentErrL = absSample - floor(absSample); 
contingent = contingentErrL * 2.0; 
(contingent > 1.0) ? contingent = ((-contingent+2.0)*omegaConstant) + expConstant
: contingent = (contingent * omegaConstant) + expConstant;

(flip) ? contingentRnd = (contingentRnd * (1.0-contingent)) + contingent + 0.5
: contingentRnd = (contingentRnd * (1.0-contingent)) - contingent + 0.5;
inputSampleL += (contingentRnd * contingent);

inputSampleL = floor(inputSampleL);

fpdR = rand(UINT32_MAX);
contingentRnd = (fpdR/UINT32_MAX);
contingentRnd += ((fpdR/UINT32_MAX)-1.0);
contingentRnd *= randyConstant; 
contingentRnd -= contingentErrR*omegaConstant; 
absSample = abs(inputSampleR);
contingentErrR = absSample - floor(absSample); 
contingent = contingentErrR * 2.0; 
(contingent > 1.0) ? contingent = ((-contingent+2.0)*omegaConstant) + expConstant
: contingent = (contingent * omegaConstant) + expConstant;

(flip) ? contingentRnd = (contingentRnd * (1.0-contingent)) + contingent + 0.5
: contingentRnd = (contingentRnd * (1.0-contingent)) - contingent + 0.5;
inputSampleR += (contingentRnd * contingent);

inputSampleR = floor(inputSampleR);

flip = !flip;

inputSampleL /= scaleFactor;
inputSampleR /= scaleFactor;

spl0 = inputSampleL;
spl1 = inputSampleR;
