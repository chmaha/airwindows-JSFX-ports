Version: 1.0
desc:TOED - Transformer Overdrive Emulator Distortion (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Coils2" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Coils2 (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,1,0.01>Saturate
slider2:0<0,1,0.01>Cheapness
slider3:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
biquadA = freemem; freemem +=15;
biquadB = freemem; freemem +=15;

@slider

A = slider1;
B = slider2;
C = slider3;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

distScaling = pow(1.0-A,2);
(distScaling < 0.0001) ? distScaling = 0.0001;
biquadA[0] = 600.0/srate;
biquadA[1] = 0.01+(pow(B,2)*0.5);
iirAmount = biquadA[1]/overallscale;
K = tan($pi * biquadA[0]);
norm = 1.0 / (1.0 + K / biquadA[1] + K * K);
biquadA[2] = K / biquadA[1] * norm;
biquadA[4] = -biquadA[2];
biquadA[5] = 2.0 * (K * K - 1.0) * norm;
biquadA[6] = (1.0 - K / biquadA[1] + K * K) * norm;
biquadB[0] = (21890.0-(biquadA[1]*890.0))/srate;
biquadB[1] = 0.89;
K = tan($pi * biquadB[0]);
norm = 1.0 / (1.0 + K / biquadB[1] + K * K);
biquadB[2] = K * K * norm;
biquadB[3] = 2.0 * biquadB[2];
biquadB[4] = biquadB[2];
biquadB[5] = 2.0 * (K * K - 1.0) * norm;
biquadB[6] = (1.0 - K / biquadB[1] + K * K) * norm;
wet = C;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

(biquadA[0] < 0.49999) ? (
    tempSample = (inputSampleL * biquadA[2]) + biquadA[7];
    biquadA[7] = -(tempSample * biquadA[5]) + biquadA[8];
    biquadA[8] = (inputSampleL * biquadA[4]) - (tempSample * biquadA[6]);
    inputSampleL = tempSample;			
    tempSample = (inputSampleR * biquadA[2]) + biquadA[9];
    biquadA[9] = -(tempSample * biquadA[5]) + biquadA[10];
    biquadA[10] = (inputSampleR * biquadA[4]) - (tempSample * biquadA[6]);
    inputSampleR = tempSample; //create bandpass of clean tone
);

diffSampleL = (drySampleL-inputSampleL)/distScaling;
diffSampleR = (drySampleR-inputSampleR)/distScaling; //mids notched out		

(biquadB[0] < 0.49999) ? (
    tempSample = (diffSampleL * biquadB[2]) + biquadB[7];
    biquadB[7] = (diffSampleL * biquadB[3]) - (tempSample * biquadB[5]) + biquadB[8];
    biquadB[8] = (diffSampleL * biquadB[4]) - (tempSample * biquadB[6]);
    diffSampleL = tempSample;
    tempSample = (diffSampleR * biquadB[2]) + biquadB[9];
    biquadB[9] = (diffSampleR * biquadB[3]) - (tempSample * biquadB[5]) + biquadB[10];
    biquadB[10] = (diffSampleR * biquadB[4]) - (tempSample * biquadB[6]);
    diffSampleR = tempSample;
);

hysteresisL = (hysteresisL * (1.0-iirAmount)) + (diffSampleL * iirAmount);
(abs(hysteresisL)<1.18*10^-37) ? hysteresisL = 0.0 : diffSampleL -= hysteresisL;
(diffSampleL > 1.571) ? diffSampleL = 1.571 : (diffSampleL < -1.571) ? diffSampleL = -1.571;
(hysteresisL > 1.571) ? hysteresisL = 1.571 : (hysteresisL < -1.571) ? hysteresisL = -1.571;
hysteresisR = (hysteresisR * (1.0-iirAmount)) + (diffSampleR * iirAmount);
(abs(hysteresisR)<1.18*10^-37) ? hysteresisR = 0.0 : diffSampleR -= hysteresisR;
(diffSampleR > 1.571) ? diffSampleR = 1.571 : (diffSampleR < -1.571) ? diffSampleR = -1.571;
(hysteresisR > 1.571) ? hysteresisR = 1.571 : (hysteresisR < -1.571) ? hysteresisR = -1.571;
inputSampleL += (sin(diffSampleL)-sin(hysteresisL))*distScaling;
inputSampleR += (sin(diffSampleR)-sin(hysteresisR))*distScaling; //apply transformer distortions

(wet !=1.0) ? (
    inputSampleL = (inputSampleL * wet) + (drySampleL * (1.0-wet));
    inputSampleR = (inputSampleR * wet) + (drySampleR * (1.0-wet));
);

spl0 = inputSampleL;
spl1 = inputSampleR;
