NoIndex: true
desc:Octo4 Bus (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "ConsoleLABuss" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/ConsoleLABuss (MIT License)
  JSFX version released under GPLv3 license

slider1:1<0,1,0.01>Master

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init


@slider

A = slider1;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

threshSinew = 0.718/overallscale;
subTrim = 0.0011 / overallscale;


@sample
inputSampleL = spl0;
inputSampleR = spl1;

gain = A;

subSampleL = inputSampleL * subTrim;
subSampleR = inputSampleR * subTrim;

scale = 0.5+abs(subSampleL*0.5);
subSampleL = (subAL+(sin(subAL-subSampleL)*scale));
subAL = subSampleL*scale;
scale = 0.5+abs(subSampleR*0.5);
subSampleR = (subAR+(sin(subAR-subSampleR)*scale));
subAR = subSampleR*scale;
scale = 0.5+abs(subSampleL*0.5);
subSampleL = (subBL+(sin(subBL-subSampleL)*scale));
subBL = subSampleL*scale;
scale = 0.5+abs(subSampleR*0.5);
subSampleR = (subBR+(sin(subBR-subSampleR)*scale));
subBR = subSampleR*scale;
scale = 0.5+abs(subSampleL*0.5);
subSampleL = (subCL+(sin(subCL-subSampleL)*scale));
subCL = subSampleL*scale;
scale = 0.5+abs(subSampleR*0.5);
subSampleR = (subCR+(sin(subCR-subSampleR)*scale));
subCR = subSampleR*scale;
(subSampleL > 0.25) ? subSampleL = 0.25;
(subSampleL < -0.25) ? subSampleL = -0.25;
(subSampleR > 0.25) ? subSampleR = 0.25;
(subSampleR < -0.25) ? subSampleR = -0.25;
inputSampleL -= (subSampleL*16.0);
inputSampleR -= (subSampleR*16.0);

(gain < 1.0) ? (
  inputSampleL *= gain;
  inputSampleR *= gain;
);

(inputSampleL > 2.8) ? inputSampleL = 2.8;
(inputSampleL < -2.8) ? inputSampleL = -2.8;
(inputSampleL > 0.0) ? inputSampleL = (inputSampleL*2.0)/(3.0-inputSampleL)
: inputSampleL = -(inputSampleL*-2.0)/(3.0+inputSampleL);

(inputSampleR > 2.8) ? inputSampleR = 2.8;
(inputSampleR < -2.8) ? inputSampleR = -2.8;
(inputSampleR > 0.0) ? inputSampleR = (inputSampleR*2.0)/(3.0-inputSampleR)
: inputSampleR = -(inputSampleR*-2.0)/(3.0+inputSampleR);

(gain < 1.0) ? (
  inputSampleL *= gain;
  inputSampleR *= gain;
); 

temp = inputSampleL;
clamp = inputSampleL - lastSinewL;
(lastSinewL > 1.0) ? lastSinewL = 1.0;
(lastSinewL < -1.0) ? lastSinewL = -1.0;
sinew = threshSinew * cos(lastSinewL);
(clamp > sinew) ? temp = lastSinewL + sinew;
(-clamp > sinew) ? temp = lastSinewL - sinew;
inputSampleL = lastSinewL = temp;
temp = inputSampleR;
clamp = inputSampleR - lastSinewR;
(lastSinewR > 1.0) ? lastSinewR = 1.0;
(lastSinewR < -1.0) ? lastSinewR = -1.0;
sinew = threshSinew * cos(lastSinewR);
(clamp > sinew) ? temp = lastSinewR + sinew;
(-clamp > sinew) ? temp = lastSinewR - sinew;
inputSampleR = lastSinewR = temp;

(gain < 1.0) ? (
  inputSampleL *= gain;
  inputSampleR *= gain;
);


spl0 = inputSampleL;
spl1 = inputSampleR;
