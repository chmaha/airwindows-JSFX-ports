version: 1.0
desc:Enyo Noise Oscillator (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Noise" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Noise (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>High Cutoff
slider2:0.5<0,1,0.01>Low Cutoff
slider3:0.5<0,1,0.01>Low Shape
slider4:1<0,1,0.01>Decay
slider5:0<0,1,0.01>Distance
slider6:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

ext_noinit = 1;

freemem = 0;
bL = freemem; freemem+=11;
bR = freemem; freemem+=11;
foo = freemem; freemem+=11; 

position = 99999999;

UINT32_MAX = 4294967295;

fpdL = rand(UINT32_MAX);
fpdR = rand(UINT32_MAX);

@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;
E = slider5;
F = slider6;

@block
cutofftarget = (A*3.5);
rumblecutoff = cutofftarget * 0.005;
highpass = C*38.0;
lowcut = floor(highpass);
(lowcut > 37) ? dcut= 1151;
(lowcut == 37) ? dcut= 1091;
(lowcut == 36) ? dcut= 1087;
(lowcut == 35) ? dcut= 1031;
(lowcut == 34) ? dcut= 1013;
(lowcut == 33) ? dcut= 971;
(lowcut == 32) ? dcut= 907;
(lowcut == 31) ? dcut= 839;
(lowcut == 30) ? dcut= 797;
(lowcut == 29) ? dcut= 733;
(lowcut == 28) ? dcut= 719;
(lowcut == 27) ? dcut= 673;
(lowcut == 26) ? dcut= 613;
(lowcut == 25) ? dcut= 593;
(lowcut == 24) ? dcut= 541;
(lowcut == 23) ? dcut= 479;
(lowcut == 22) ? dcut= 431;
(lowcut == 21) ? dcut= 419;
(lowcut == 20) ? dcut= 373;
(lowcut == 19) ? dcut= 311;
(lowcut == 18) ? dcut= 293;
(lowcut == 17) ? dcut= 233;
(lowcut == 16) ? dcut= 191;
(lowcut == 15) ? dcut= 173;
(lowcut == 14) ? dcut= 131;
(lowcut == 13) ? dcut= 113;
(lowcut == 12) ? dcut= 71;
(lowcut == 11) ? dcut= 53;
(lowcut == 10) ? dcut= 31;
(lowcut == 9) ? dcut= 27;
(lowcut == 8) ? dcut= 23;
(lowcut == 7) ? dcut= 19;
(lowcut == 6) ? dcut= 17;
(lowcut == 5) ? dcut= 13;
(lowcut == 4) ? dcut= 11;
(lowcut == 3) ? dcut= 7;
(lowcut == 2) ? dcut= 5;
(lowcut < 2) ? dcut= 3;
highpass = B * 22.0;
lowcut = floor(highpass)+1;

decay = 0.001 - ((1.0-pow(1.0-D,3))*0.001);
(decay == 0.001) ? decay = 0.1;
wet = F;
wet *= 0.01; 
overallscale = (E*9.0)+1.0;
gain = overallscale;

(gain > 1.0) ? (foo[0] = 1.0; gain -= 1.0;) : (foo[0] = gain; gain = 0.0;);
(gain > 1.0) ? (foo[1] = 1.0; gain -= 1.0;) : (foo[1] = gain; gain = 0.0;);
(gain > 1.0) ? (foo[2] = 1.0; gain -= 1.0;) : (foo[2] = gain; gain = 0.0;);
(gain > 1.0) ? (foo[3] = 1.0; gain -= 1.0;) : (foo[3] = gain; gain = 0.0;);
(gain > 1.0) ? (foo[4] = 1.0; gain -= 1.0;) : (foo[4] = gain; gain = 0.0;);
(gain > 1.0) ? (foo[5] = 1.0; gain -= 1.0;) : (foo[5] = gain; gain = 0.0;);
(gain > 1.0) ? (foo[6] = 1.0; gain -= 1.0;) : (foo[6] = gain; gain = 0.0;);
(gain > 1.0) ? (foo[7] = 1.0; gain -= 1.0;) : (foo[7] = gain; gain = 0.0;);
(gain > 1.0) ? (foo[8] = 1.0; gain -= 1.0;) : (foo[8] = gain; gain = 0.0;);
(gain > 1.0) ? (foo[9] = 1.0; gain -= 1.0;) : (foo[9] = gain; gain = 0.0;);

(overallscale < 1.0) ? overallscale = 1.0;
foo[0] /= overallscale;
foo[1] /= overallscale;
foo[2] /= overallscale;
foo[3] /= overallscale;
foo[4] /= overallscale;
foo[5] /= overallscale;
foo[6] /= overallscale;
foo[7] /= overallscale;
foo[8] /= overallscale;
foo[9] /= overallscale;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

(surgeL<abs(inputSampleL)) ?
(
  surgeL += (fpdL/UINT32_MAX)*(abs(inputSampleL)-surgeL);
  (surgeL > 1.0) ? surgeL = 1.0;
)
:
(
  surgeL -= ((fpdL/UINT32_MAX)*(surgeL-abs(inputSampleL))*decay);
  (surgeL < 0.0) ? surgeL = 0.0;
);

cutoffL = pow((cutofftarget*surgeL),5);
(cutoffL > 1.0) ? cutoffL = 1.0;
invcutoffL = 1.0 - cutoffL;

(surgeR<abs(inputSampleR)) ?
(
  surgeR += (fpdR/UINT32_MAX)*(abs(inputSampleR)-surgeR);
  (surgeR > 1.0) ? surgeR = 1.0;
)
:
(
  surgeR -= ((fpdR/UINT32_MAX)*(surgeR-abs(inputSampleR))*decay);
  (surgeR < 0.0) ? surgeR = 0.0;
);


cutoffR = pow((cutofftarget*surgeR),5);
(cutoffR > 1.0) ? cutoffR = 1.0;
invcutoffR = 1.0 - cutoffR;

flipL = !flipL;
flipR = !flipR;
filterflip = !filterflip;
quadratic -= 1;
(quadratic < 0) ?
(
  position += 1;    
  quadratic = position * position;
  quadratic = quadratic % 170003; 
  quadratic *= quadratic;
  quadratic = quadratic % 17011; 
  quadratic *= quadratic;
  quadratic = quadratic % dcut;
  quadratic *= quadratic;
  quadratic = quadratic % lowcut;
  
  (noiseAL < 0) ? flipL = 1 : flipL = 0;
  (noiseAR < 0) ? flipR = 1 : flipR = 0;
);

fpdL = rand(UINT32_MAX);
fpdR = rand(UINT32_MAX);

(flipL) ? noiseAL += (fpdL/UINT32_MAX) : noiseAL -= (fpdL/UINT32_MAX);
(flipR) ? noiseAR += (fpdR/UINT32_MAX) : noiseAR -= (fpdR/UINT32_MAX);

(filterflip) ?
(
  noiseBL *= invcutoffL; noiseBL += (noiseAL*cutoffL);
  inputSampleL = noiseBL+noiseCL;
  rumbleAL *= (1.0-rumblecutoff);
  rumbleAL += (inputSampleL*rumblecutoff);
  
  noiseBR *= invcutoffR; noiseBR += (noiseAR*cutoffR);
  inputSampleR = noiseBR+noiseCR;
  rumbleAR *= (1.0-rumblecutoff);
  rumbleAR += (inputSampleR*rumblecutoff);
)
: 
(
  noiseCL *= invcutoffL; noiseCL += (noiseAL*cutoffL);
  inputSampleL = noiseBL+noiseCL;
  rumbleBL *= (1.0-rumblecutoff);
  rumbleBL += (inputSampleL*rumblecutoff);
  
  noiseCR *= invcutoffR; noiseCR += (noiseAR*cutoffR);
  inputSampleR = noiseBR+noiseCR;
  rumbleBR *= (1.0-rumblecutoff);
  rumbleBR += (inputSampleR*rumblecutoff);
);

inputSampleL -= (rumbleAL+rumbleBL);
inputSampleL *= (1.0-rumblecutoff);

inputSampleR -= (rumbleAR+rumbleBR);
inputSampleR *= (1.0-rumblecutoff);

inputSampleL *= wet;
inputSampleR *= wet;

inputSampleL += drySampleL * (1-F);
inputSampleR += drySampleR * (1-F);


bL[9] = bL[8]; bL[8] = bL[7]; bL[7] = bL[6]; bL[6] = bL[5];
bL[5] = bL[4]; bL[4] = bL[3]; bL[3] = bL[2]; bL[2] = bL[1];
bL[1] = bL[0]; bL[0] = accumulatorSampleL = inputSampleL;

bR[9] = bR[8]; bR[8] = bR[7]; bR[7] = bR[6]; bR[6] = bR[5];
bR[5] = bR[4]; bR[4] = bR[3]; bR[3] = bR[2]; bR[2] = bR[1];
bR[1] = bR[0]; bR[0] = accumulatorSampleR = inputSampleR;

accumulatorSampleL *= foo[0];
accumulatorSampleL += (bL[1] * foo[1]);
accumulatorSampleL += (bL[2] * foo[2]);
accumulatorSampleL += (bL[3] * foo[3]);
accumulatorSampleL += (bL[4] * foo[4]);
accumulatorSampleL += (bL[5] * foo[5]);
accumulatorSampleL += (bL[6] * foo[6]);
accumulatorSampleL += (bL[7] * foo[7]);
accumulatorSampleL += (bL[8] * foo[8]);
accumulatorSampleL += (bL[9] * foo[9]);

accumulatorSampleR *= foo[0];
accumulatorSampleR += (bR[1] * foo[1]);
accumulatorSampleR += (bR[2] * foo[2]);
accumulatorSampleR += (bR[3] * foo[3]);
accumulatorSampleR += (bR[4] * foo[4]);
accumulatorSampleR += (bR[5] * foo[5]);
accumulatorSampleR += (bR[6] * foo[6]);
accumulatorSampleR += (bR[7] * foo[7]);
accumulatorSampleR += (bR[8] * foo[8]);
accumulatorSampleR += (bR[9] * foo[9]);

correctionSample = inputSampleL - accumulatorSampleL;
inputSampleL -= correctionSample;
correctionSample = inputSampleR - accumulatorSampleR;
inputSampleR -= correctionSample;

fpdL = rand(UINT32_MAX);
fpdR = rand(UINT32_MAX);

spl0 = inputSampleL;
spl1 = inputSampleR;
