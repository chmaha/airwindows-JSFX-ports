Version:1.0
desc:Sororium Consoles
author: chmaha
about:
  Uses DSP from airwindows "EveryConsole" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/EveryConsole (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,11,1{Aria Channel,Aria Buss,Bella Channel,Bella Buss,Calista Channel,Calista Buss,Daphne Channel,Daphne Buss,Elysia Channel,Elysia Buss,Freya Channel,Freya Buss}>Console
slider2:1<0,2,0.01>Trim In
slider3:1<0,2,0.01>Trim Out

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

M_PI_2 = $pi/2

@slider

inTrim = slider2;
outTrim = slider3;

@block

@sample
inputSampleL = spl0;
inputSampleR = spl1;

inputSampleL *= inTrim;
inputSampleR *= inTrim;

(slider1 == 0) ? (
    half = inputSampleL * 0.83;
    falf = abs(half);
    half *= falf;
    half *= falf;
    inputSampleL -= half;
    half = inputSampleR * 0.83;
    falf = abs(half);
    half *= falf;
    half *= falf;
    inputSampleR -= half;
) : (slider1 == 1) ? (
    half = inputSampleL * 0.885;
    falf = abs(half);
    half *= falf;
    half *= falf;
    inputSampleL += half;
    half = inputSampleR * 0.885;
    falf = abs(half);
    half *= falf;
    half *= falf;
    inputSampleR += half;
) : (slider1 == 2) ? (
    (inputSampleL > M_PI_2) ? inputSampleL = M_PI_2;
    (inputSampleL < -M_PI_2) ? inputSampleL = -M_PI_2;
    inputSampleL = sin(inputSampleL);
    (inputSampleR > M_PI_2) ? inputSampleR = M_PI_2;
    (inputSampleR < -M_PI_2) ? inputSampleR = -M_PI_2;
    inputSampleR = sin(inputSampleR);
) : (slider1 == 3) ? (
    (inputSampleL > 1.0) ? inputSampleL = 1.0;
    (inputSampleL < -1.0) ? inputSampleL = -1.0;
    inputSampleL = asin(inputSampleL);
    (inputSampleR > 1.0) ? inputSampleR = 1.0;
    (inputSampleR < -1.0) ? inputSampleR = -1.0;
    inputSampleR = asin(inputSampleR);
) : (slider1 == 4) ? (
    (inputSampleL > 1.0) ? inputSampleL= 1.0
    : (inputSampleL > 0.0) ? inputSampleL = 1.0 - pow(1.0-inputSampleL,2.0);
    (inputSampleL < -1.0) ? inputSampleL = -1.0
    : (inputSampleL < 0.0) ? inputSampleL = -1.0 + pow(1.0+inputSampleL,2.0);
    (inputSampleR > 1.0) ? inputSampleR = 1.0
    : (inputSampleR > 0.0) ? inputSampleR = 1.0 - pow(1.0-inputSampleR,2.0);
    (inputSampleR < -1.0) ? inputSampleR = -1.0
    :(inputSampleR < 0.0) ? inputSampleR = -1.0 + pow(1.0+inputSampleR,2.0);
) : (slider1 == 5) ? (
    (inputSampleL > 1.0) ? inputSampleL= 1.0
    : (inputSampleL > 0.0) ? inputSampleL = 1.0 - pow(1.0-inputSampleL,0.5);
    (inputSampleL < -1.0) ? inputSampleL = -1.0
    : (inputSampleL < 0.0) ? inputSampleL = -1.0 + pow(1.0+inputSampleL,0.5);
     (inputSampleR > 1.0) ? inputSampleR = 1.0
    :  (inputSampleR > 0.0) ? inputSampleR = 1.0 - pow(1.0-inputSampleR,0.5);
     (inputSampleR < -1.0) ? inputSampleR = -1.0
    :  (inputSampleR < 0.0) ? inputSampleR = -1.0 + pow(1.0+inputSampleR,0.5);
) : (slider1 == 6) ? (
    (inputSampleL > 1.097) ? inputSampleL = 1.097;
    (inputSampleL < -1.097) ? inputSampleL = -1.097;
    inputSampleL = ((sin(inputSampleL*abs(inputSampleL))/((abs(inputSampleL) == 0.0) ?1:abs(inputSampleL)))*0.8)+(sin(inputSampleL)*0.2);
    (inputSampleR > 1.097) ? inputSampleR = 1.097;
    (inputSampleR < -1.097) ? inputSampleR = -1.097;
    inputSampleR = ((sin(inputSampleR*abs(inputSampleR))/((abs(inputSampleR) == 0.0) ?1:abs(inputSampleR)))*0.8)+(sin(inputSampleR)*0.2);
) : (slider1 == 7) ? (
    (inputSampleL > 1.0) ? inputSampleL = 1.0;
    (inputSampleL < -1.0) ? inputSampleL = -1.0;
    inputSampleL = ((asin(inputSampleL*abs(inputSampleL))/((abs(inputSampleL) == 0.0) ?1:abs(inputSampleL)))*0.618033988749894848204586)+(asin(inputSampleL)*0.381966011250105);
    (inputSampleR > 1.0) ? inputSampleR = 1.0;
    (inputSampleR < -1.0) ? inputSampleR = -1.0;
    inputSampleR = ((asin(inputSampleR*abs(inputSampleR))/((abs(inputSampleR) == 0.0) ?1:abs(inputSampleR)))*0.618033988749894848204586)+(asin(inputSampleR)*0.381966011250105);
) : (slider1 == 8) ? (
    inputSampleL += ((pow(inputSampleL, 5) / 128.0) + (pow(inputSampleL, 9) / 262144.0)) - ((pow(inputSampleL, 3) / 8.0) + (pow(inputSampleL, 7) / 4096.0));
    inputSampleR += ((pow(inputSampleR, 5) / 128.0) + (pow(inputSampleR, 9) / 262144.0)) - ((pow(inputSampleR, 3) / 8.0) + (pow(inputSampleR, 7) / 4096.0));
) : (slider1 == 9) ? (
    inputSampleL += (pow(inputSampleL, 3) / 4.0) + (pow(inputSampleL, 5) / 8.0) + (pow(inputSampleL, 7) / 16.0) + (pow(inputSampleL, 9) / 32.0);
    inputSampleR += (pow(inputSampleR, 3) / 4.0) + (pow(inputSampleR, 5) / 8.0) + (pow(inputSampleR, 7) / 16.0) + (pow(inputSampleR, 9) / 32.0);
) : (slider1 == 10) ? (
    (inputSampleL > 1.4137166941154) ? inputSampleL = 1.4137166941154;
    (inputSampleL < -1.4137166941154) ? inputSampleL = -1.4137166941154;
    (inputSampleL > 0.0) ? inputSampleL = (inputSampleL/2.0)*(2.8274333882308-inputSampleL)
    : inputSampleL = -(inputSampleL/-2.0)*(2.8274333882308+inputSampleL);
    (inputSampleR > 1.4137166941154) ? inputSampleR = 1.4137166941154;
    (inputSampleR < -1.4137166941154) ? inputSampleR = -1.4137166941154;
    (inputSampleR > 0.0) ? inputSampleR = (inputSampleR/2.0)*(2.8274333882308-inputSampleR)
    : inputSampleR = -(inputSampleR/-2.0)*(2.8274333882308+inputSampleR);
) : (slider1 == 11) ? (
    (inputSampleL > 2.8) ? inputSampleL = 2.8;
    (inputSampleL < -2.8) ? inputSampleL = -2.8;
    (inputSampleL > 0.0) ? inputSampleL = (inputSampleL*2.0)/(3.0-inputSampleL)
    : inputSampleL = -(inputSampleL*-2.0)/(3.0+inputSampleL);
    (inputSampleR > 2.8) ? inputSampleR = 2.8;
    (inputSampleR < -2.8) ? inputSampleR = -2.8;
    (inputSampleR > 0.0) ? inputSampleR = (inputSampleR*2.0)/(3.0-inputSampleR)
    : inputSampleR = -(inputSampleR*-2.0)/(3.0+inputSampleR);
);

outTrim != 1.0 ? (
      inputSampleL *= outTrim;
      inputSampleR *= outTrim;
    );
    
spl0 = inputSampleL;
spl1 = inputSampleR;
