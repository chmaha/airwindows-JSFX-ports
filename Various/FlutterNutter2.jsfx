Version: 1.0
desc:FlutterNutter 2 (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Flutter2" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Flutter2 (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Flutter
slider2:0.5<0,1,0.01>Speed
slider3:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;

dL = freemem; freemem+=1002;
dR = freemem; freemem+=1002;

UINT32_MAX = 4294967295;

fpdL = rand(UINT32_MAX);
fpdR = rand(UINT32_MAX);

sweepL = $pi;
sweepR = $pi;
nextmaxL = 0.5;
nextmaxR = 0.5;

@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;
E = slider5;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

flutDepth = pow(A,4)*overallscale*90;
(flutDepth > 498.0) ? flutDepth = 498.0;
flutFrequency = (0.02*pow(B,3))/overallscale;
wet = C;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

(gcount < 0 || gcount > 999) ? gcount = 999;

dL[gcount] = inputSampleL;
count = gcount;
offset = flutDepth + (flutDepth * sin(sweepL));
sweepL += nextmaxL * flutFrequency;
(sweepL > ($pi*2.0)) ? (sweepL -= $pi*2.0; nextmaxL = 0.24 + (fpdL / UINT32_MAX * 0.74));
count += floor(offset);
inputSampleL = (dL[count-((count > 999)?1000:0)] * (1-(offset-floor(offset))));
inputSampleL += (dL[count+1-((count+1 > 999)?1000:0)] * (offset-floor(offset)));

dR[gcount] = inputSampleR;
count = gcount;
offset = flutDepth + (flutDepth * sin(sweepR));
sweepR += nextmaxR * flutFrequency;
(sweepR > ($pi*2.0)) ? (sweepR -= $pi*2.0; nextmaxR = 0.24 + (fpdR / UINT32_MAX * 0.74));
count += floor(offset);
inputSampleR = (dR[count-((count > 999)?1000:0)] * (1-(offset-floor(offset))));
inputSampleR += (dR[count+1-((count+1 > 999)?1000:0)] * (offset-floor(offset)));

gcount-=1;

(wet !=1.0)  ? (
    inputSampleL = (inputSampleL * wet) + (drySampleL * (1.0-wet));
    inputSampleR = (inputSampleR * wet) + (drySampleR * (1.0-wet));
);

fpdL = rand(UINT32_MAX);
fpdR = rand(UINT32_MAX);

spl0 = inputSampleL;
spl1 = inputSampleR;
