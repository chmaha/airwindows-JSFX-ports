Version: 1.0
desc:EdgeFilter (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "BiquadHiLo" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/BiquadHiLo (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,1,0.01>High Pass
slider2:0<0,1,0.01>Low Pass

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
highpass = freemem; freemem+=26;
lowpass = freemem; freemem+=26;

hilp_freq = 0; hilp_temp = 1;
hilp_a0 = 2; hilp_a1 = 3; hilp_b1 = 4; hilp_b2 = 5;
hilp_c0 = 6; hilp_c1 = 7; hilp_d1 = 8; hilp_d2 = 9;
hilp_e0 = 10; hilp_e1 = 11; hilp_f1 = 12; hilp_f2 = 13;
hilp_aL1 = 14; hilp_aL2 = 15; hilp_aR1 = 16; hilp_aR2 = 17;
hilp_cL1 = 18; hilp_cL2 = 19; hilp_cR1 = 20; hilp_cR2 = 21;
hilp_eL1 = 22; hilp_eL2 = 23; hilp_eR1 = 24; hilp_eR2 = 25;



@slider

A = slider1;
B = slider2;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

highpass[hilp_freq] = ((A*330.0)+20.0)/srate;
highpassEngage = 1; (A == 0.0) ? highpassEngage = 0;

lowpass[hilp_freq] = ((pow(1.0-B,2)*17000.0)+3000.0)/srate;
lowpassEngage = 1; (B == 0.0) ? lowpassEngage = 0;

K = tan($pi * highpass[hilp_freq]);
norm = 1.0 / (1.0 + K / 1.93185165 + K * K);
highpass[hilp_a0] = norm;
highpass[hilp_a1] = -2.0 * highpass[hilp_a0];
highpass[hilp_b1] = 2.0 * (K * K - 1.0) * norm;
highpass[hilp_b2] = (1.0 - K / 1.93185165 + K * K) * norm;
norm = 1.0 / (1.0 + K / 0.70710678 + K * K);
highpass[hilp_c0] = norm;
highpass[hilp_c1] = -2.0 * highpass[hilp_c0];
highpass[hilp_d1] = 2.0 * (K * K - 1.0) * norm;
highpass[hilp_d2] = (1.0 - K / 0.70710678 + K * K) * norm;
norm = 1.0 / (1.0 + K / 0.51763809 + K * K);
highpass[hilp_e0] = norm;
highpass[hilp_e1] = -2.0 * highpass[hilp_e0];
highpass[hilp_f1] = 2.0 * (K * K - 1.0) * norm;
highpass[hilp_f2] = (1.0 - K / 0.51763809 + K * K) * norm;

K = tan($pi * lowpass[hilp_freq]);
norm = 1.0 / (1.0 + K / 1.93185165 + K * K);
lowpass[hilp_a0] = K * K * norm;
lowpass[hilp_a1] = 2.0 * lowpass[hilp_a0];
lowpass[hilp_b1] = 2.0 * (K * K - 1.0) * norm;
lowpass[hilp_b2] = (1.0 - K / 1.93185165 + K * K) * norm;
norm = 1.0 / (1.0 + K / 0.70710678 + K * K);
lowpass[hilp_c0] = K * K * norm;
lowpass[hilp_c1] = 2.0 * lowpass[hilp_c0];
lowpass[hilp_d1] = 2.0 * (K * K - 1.0) * norm;
lowpass[hilp_d2] = (1.0 - K / 0.70710678 + K * K) * norm;
norm = 1.0 / (1.0 + K / 0.51763809 + K * K);
lowpass[hilp_e0] = K * K * norm;
lowpass[hilp_e1] = 2.0 * lowpass[hilp_e0];
lowpass[hilp_f1] = 2.0 * (K * K - 1.0) * norm;
lowpass[hilp_f2] = (1.0 - K / 0.51763809 + K * K) * norm;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

(highpassEngage) ? (
    highpass[hilp_temp] = (inputSampleL*highpass[hilp_a0])+highpass[hilp_aL1];
    highpass[hilp_aL1] = (inputSampleL*highpass[hilp_a1])-(highpass[hilp_temp]*highpass[hilp_b1])+highpass[hilp_aL2];
    highpass[hilp_aL2] = (inputSampleL*highpass[hilp_a0])-(highpass[hilp_temp]*highpass[hilp_b2]); inputSampleL = highpass[hilp_temp];
    highpass[hilp_temp] = (inputSampleL*highpass[hilp_c0])+highpass[hilp_cL1];
    highpass[hilp_cL1] = (inputSampleL*highpass[hilp_c1])-(highpass[hilp_temp]*highpass[hilp_d1])+highpass[hilp_cL2];
    highpass[hilp_cL2] = (inputSampleL*highpass[hilp_c0])-(highpass[hilp_temp]*highpass[hilp_d2]); inputSampleL = highpass[hilp_temp];
    highpass[hilp_temp] = (inputSampleL*highpass[hilp_e0])+highpass[hilp_eL1];
    highpass[hilp_eL1] = (inputSampleL*highpass[hilp_e1])-(highpass[hilp_temp]*highpass[hilp_f1])+highpass[hilp_eL2];
    highpass[hilp_eL2] = (inputSampleL*highpass[hilp_e0])-(highpass[hilp_temp]*highpass[hilp_f2]); inputSampleL = highpass[hilp_temp];
    highpass[hilp_temp] = (inputSampleR*highpass[hilp_a0])+highpass[hilp_aR1];
    highpass[hilp_aR1] = (inputSampleR*highpass[hilp_a1])-(highpass[hilp_temp]*highpass[hilp_b1])+highpass[hilp_aR2];
    highpass[hilp_aR2] = (inputSampleR*highpass[hilp_a0])-(highpass[hilp_temp]*highpass[hilp_b2]); inputSampleR = highpass[hilp_temp];
    highpass[hilp_temp] = (inputSampleR*highpass[hilp_c0])+highpass[hilp_cR1];
    highpass[hilp_cR1] = (inputSampleR*highpass[hilp_c1])-(highpass[hilp_temp]*highpass[hilp_d1])+highpass[hilp_cR2];
    highpass[hilp_cR2] = (inputSampleR*highpass[hilp_c0])-(highpass[hilp_temp]*highpass[hilp_d2]); inputSampleR = highpass[hilp_temp];
    highpass[hilp_temp] = (inputSampleR*highpass[hilp_e0])+highpass[hilp_eR1];
    highpass[hilp_eR1] = (inputSampleR*highpass[hilp_e1])-(highpass[hilp_temp]*highpass[hilp_f1])+highpass[hilp_eR2];
    highpass[hilp_eR2] = (inputSampleR*highpass[hilp_e0])-(highpass[hilp_temp]*highpass[hilp_f2]); inputSampleR = highpass[hilp_temp];
) : (
    highpass[hilp_aL1] = highpass[hilp_aL2] = highpass[hilp_aR1] = highpass[hilp_aR2] = 0.0;
);


(lowpassEngage) ? (
    lowpass[hilp_temp] = (inputSampleL*lowpass[hilp_a0])+lowpass[hilp_aL1];
    lowpass[hilp_aL1] = (inputSampleL*lowpass[hilp_a1])-(lowpass[hilp_temp]*lowpass[hilp_b1])+lowpass[hilp_aL2];
    lowpass[hilp_aL2] = (inputSampleL*lowpass[hilp_a0])-(lowpass[hilp_temp]*lowpass[hilp_b2]); inputSampleL = lowpass[hilp_temp];
    lowpass[hilp_temp] = (inputSampleL*lowpass[hilp_c0])+lowpass[hilp_cL1];
    lowpass[hilp_cL1] = (inputSampleL*lowpass[hilp_c1])-(lowpass[hilp_temp]*lowpass[hilp_d1])+lowpass[hilp_cL2];
    lowpass[hilp_cL2] = (inputSampleL*lowpass[hilp_c0])-(lowpass[hilp_temp]*lowpass[hilp_d2]); inputSampleL = lowpass[hilp_temp];
    lowpass[hilp_temp] = (inputSampleL*lowpass[hilp_e0])+lowpass[hilp_eL1];
    lowpass[hilp_eL1] = (inputSampleL*lowpass[hilp_e1])-(lowpass[hilp_temp]*lowpass[hilp_f1])+lowpass[hilp_eL2];
    lowpass[hilp_eL2] = (inputSampleL*lowpass[hilp_e0])-(lowpass[hilp_temp]*lowpass[hilp_f2]); inputSampleL = lowpass[hilp_temp];
    lowpass[hilp_temp] = (inputSampleR*lowpass[hilp_a0])+lowpass[hilp_aR1];
    lowpass[hilp_aR1] = (inputSampleR*lowpass[hilp_a1])-(lowpass[hilp_temp]*lowpass[hilp_b1])+lowpass[hilp_aR2];
    lowpass[hilp_aR2] = (inputSampleR*lowpass[hilp_a0])-(lowpass[hilp_temp]*lowpass[hilp_b2]); inputSampleR = lowpass[hilp_temp];
    lowpass[hilp_temp] = (inputSampleR*lowpass[hilp_c0])+lowpass[hilp_cR1];
    lowpass[hilp_cR1] = (inputSampleR*lowpass[hilp_c1])-(lowpass[hilp_temp]*lowpass[hilp_d1])+lowpass[hilp_cR2];
    lowpass[hilp_cR2] = (inputSampleR*lowpass[hilp_c0])-(lowpass[hilp_temp]*lowpass[hilp_d2]); inputSampleR = lowpass[hilp_temp];
    lowpass[hilp_temp] = (inputSampleR*lowpass[hilp_e0])+lowpass[hilp_eR1];
    lowpass[hilp_eR1] = (inputSampleR*lowpass[hilp_e1])-(lowpass[hilp_temp]*lowpass[hilp_f1])+lowpass[hilp_eR2];
    lowpass[hilp_eR2] = (inputSampleR*lowpass[hilp_e0])-(lowpass[hilp_temp]*lowpass[hilp_f2]); inputSampleR = lowpass[hilp_temp];
) : (
    lowpass[hilp_aL1] = lowpass[hilp_aL2] = lowpass[hilp_aR1] = lowpass[hilp_aR2] = 0.0;
);


spl0 = inputSampleL;
spl1 = inputSampleR;
