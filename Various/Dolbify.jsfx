Version: 1.0
desc:Dolbify Compressor (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Dubly3" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Dubly3 (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Input
slider2:0.5<0,1,0.01>Tilt
slider3:0.5<0,1,0.01>Shape
slider4:0.5<0,1,0.01>Output

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

compEncL = 1.0; compEncR = 1.0;
compDecL = 1.0; compDecR = 1.0;

@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

inputGain = pow(A*2.0,2.0);
dublyAmount = B*2.0;
outlyAmount = (1.0-B)*-2.0;
(outlyAmount < -1.0) ? outlyAmount = -1.0;
iirEncFreq = (1.0-C)/overallscale;
iirDecFreq = C/overallscale;
outputGain = D*2.0;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

(inputGain != 1.0) ? (
    inputSampleL *= inputGain;
    inputSampleR *= inputGain;
);

iirEncL = (iirEncL * (1.0 - iirEncFreq)) + (inputSampleL * iirEncFreq);
highPart = ((inputSampleL-iirEncL)*2.848);
highPart += avgEncL; avgEncL = (inputSampleL-iirEncL)*1.152;
(highPart > 1.0) ? highPart = 1.0; (highPart < -1.0) ? highPart = -1.0;
dubly = abs(highPart);
(dubly > 0.0) ? (
    adjust = log(1.0+(255.0*dubly))/2.40823996531;
    (adjust > 0.0) ? dubly /= adjust;
    compEncL = (compEncL*(1.0-iirEncFreq))+(dubly*iirEncFreq);
    inputSampleL += ((highPart*compEncL)*dublyAmount);
);
iirEncR = (iirEncR * (1.0 - iirEncFreq)) + (inputSampleR * iirEncFreq);
highPart = ((inputSampleR-iirEncR)*2.848);
highPart += avgEncR; avgEncR = (inputSampleR-iirEncR)*1.152;
(highPart > 1.0) ? highPart = 1.0; (highPart < -1.0) ? highPart = -1.0;
dubly = abs(highPart);
(dubly > 0.0) ? (
    adjust = log(1.0+(255.0*dubly))/2.40823996531;
    (adjust > 0.0) ? dubly /= adjust;
    compEncR = (compEncR*(1.0-iirEncFreq))+(dubly*iirEncFreq);
    inputSampleR += ((highPart*compEncR)*dublyAmount);
);

(inputSampleL > 1.57079633) ? inputSampleL = 1.57079633;
(inputSampleL < -1.57079633) ? inputSampleL = -1.57079633;
inputSampleL = sin(inputSampleL);
(inputSampleR > 1.57079633) ? inputSampleR = 1.57079633;
(inputSampleR < -1.57079633) ? inputSampleR = -1.57079633;
inputSampleR = sin(inputSampleR);

iirDecL = (iirDecL * (1.0 - iirDecFreq)) + (inputSampleL * iirDecFreq);
highPart = ((inputSampleL-iirDecL)*2.628);
highPart += avgDecL; avgDecL = (inputSampleL-iirDecL)*1.372;
(highPart > 1.0) ? highPart = 1.0; (highPart < -1.0) ? highPart = -1.0;
dubly = abs(highPart);
(dubly > 0.0) ? (
    adjust = log(1.0+(255.0*dubly))/2.40823996531;
    (adjust > 0.0) ? dubly /= adjust;
    compDecL = (compDecL*(1.0-iirDecFreq))+(dubly*iirDecFreq);
    inputSampleL += ((highPart*compDecL)*outlyAmount);
);
iirDecR = (iirDecR * (1.0 - iirDecFreq)) + (inputSampleR * iirDecFreq);
highPart = ((inputSampleR-iirDecR)*2.628);
highPart += avgDecR; avgDecR = (inputSampleR-iirDecR)*1.372;
(highPart > 1.0) ? highPart = 1.0; (highPart < -1.0) ? highPart = -1.0;
dubly = abs(highPart);
(dubly > 0.0) ? (
    adjust = log(1.0+(255.0*dubly))/2.40823996531;
    (adjust > 0.0) ? dubly /= adjust;
    compDecR = (compDecR*(1.0-iirDecFreq))+(dubly*iirDecFreq);
    inputSampleR += ((highPart*compDecR)*outlyAmount);
);

(outputGain != 1.0) ? (
    inputSampleL *= outputGain;
    inputSampleR *= outputGain;
);

spl0 = inputSampleL;
spl1 = inputSampleR;
