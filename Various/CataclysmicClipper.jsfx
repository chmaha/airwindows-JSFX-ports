Version: 1.0
desc:Cataclysmic Clipper (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "ADClip8" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/ADClip8 (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,18,0.01>Boost (dB)
slider2:0.883<0,1,0.01>Ceiling
slider3:0<0,7,1{Normal,Atten,Clips,Afterburner,Explode,Nuke,Apocalypse,Apotheosis}>Mode

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

freemem = 0;
lastSampleL = freemem; freemem+8;
wasPosClipL = freemem; freemem+8;
wasNegClipL = freemem; freemem+8;
lastSampleR = freemem; freemem+8;
wasPosClipR = freemem; freemem+8;
wasNegClipR = freemem; freemem+8;
intermediateL = freemem; freemem+128;
intermediateR = freemem; freemem+128;

@slider

A = slider1;
B = slider2;
C = slider3;

@block

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

spacing = floor(overallscale);
(spacing < 1) ? spacing = 1; (spacing > 16) ? spacing = 16;

inputGain = pow(10.0,A/20.0);

ceiling = (1.0+(B*0.23594733))*0.5;
mode = C+1;
stageSetting = mode-2;
(stageSetting < 1) ? stageSetting = 1;
inputGain = ((inputGain-1.0)/stageSetting)+1.0;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

inputSampleL *= 1.618033988749894;
inputSampleR *= 1.618033988749894;

stage = 0; while (stage < stageSetting) (
  
  (inputGain != 1.0) ? (
    inputSampleL *= inputGain;
    inputSampleR *= inputGain;
  );
  
  (stage == 0) ? (
    overshootL = abs(inputSampleL) - 1.618033988749894;
    (overshootL < 0.0) ? overshootL = 0.0;
    overshootR = abs(inputSampleR) - 1.618033988749894;
    (overshootR < 0.0) ? overshootR = 0.0;
  );
  
  (inputSampleL > 4.0) ? inputSampleL = 4.0; (inputSampleL < -4.0) ? inputSampleL = -4.0;
  (inputSampleL - lastSampleL[stage] > 0.618033988749894) ? inputSampleL = lastSampleL[stage] + 0.618033988749894;
  (inputSampleL - lastSampleL[stage] < -0.618033988749894) ? inputSampleL = lastSampleL[stage] - 0.618033988749894;
  (inputSampleR > 4.0) ? inputSampleR = 4.0; (inputSampleR < -4.0) ? inputSampleR = -4.0;
  (inputSampleR - lastSampleR[stage] > 0.618033988749894) ? inputSampleR = lastSampleR[stage] + 0.618033988749894;
  (inputSampleR - lastSampleR[stage] < -0.618033988749894) ? inputSampleR = lastSampleR[stage] - 0.618033988749894;

  (wasPosClipL[stage] == 1) ? ( 
    (inputSampleL<lastSampleL[stage]) ? lastSampleL[stage]=1.0+(inputSampleL*0.381966011250105)
    : lastSampleL[stage] = 0.618033988749894+(lastSampleL[stage]*0.618033988749894);
  ); wasPosClipL[stage] = 0;
  (inputSampleL>1.618033988749894) ? (wasPosClipL[stage]=1;inputSampleL=1.0+(lastSampleL[stage]*0.381966011250105));
  (wasNegClipL[stage] == 1) ? (
    (inputSampleL > lastSampleL[stage]) ? lastSampleL[stage]=-1.0+(inputSampleL*0.381966011250105)
    : lastSampleL[stage]=-0.618033988749894+(lastSampleL[stage]*0.618033988749894);
  ); wasNegClipL[stage] = 0;
  (inputSampleL<-1.618033988749894) ? (wasNegClipL[stage]=1;inputSampleL=-1.0+(lastSampleL[stage]*0.381966011250105));
  intermediateL[(spacing*stage)+stage] = inputSampleL;
  //inputSampleL = lastSampleL[stage];
  x = spacing; while (x > 0) (intermediateL[((x-1)*stage)+stage] = intermediateL[(x*stage)+stage]; x=x-1);
  lastSampleL[stage] = intermediateL[stage]; 

  (wasPosClipR[stage] == 1) ? (
    (inputSampleR<lastSampleR[stage]) ? lastSampleR[stage]=1.0+(inputSampleR*0.381966011250105)
    : lastSampleR[stage] = 0.618033988749894+(lastSampleR[stage]*0.618033988749894);
  ); wasPosClipR[stage] = 0;
  (inputSampleR>1.618033988749894) ? (wasPosClipR[stage]=1;inputSampleR=1.0+(lastSampleR[stage]*0.381966011250105));
  (wasNegClipR[stage] == 1) ? ( 
    (inputSampleR > lastSampleR[stage]) ? lastSampleR[stage]=-1.0+(inputSampleR*0.381966011250105)
    : lastSampleR[stage]=-0.618033988749894+(lastSampleR[stage]*0.618033988749894)
  ); wasNegClipR[stage] = 0;
  (inputSampleR<-1.618033988749894) ? (wasNegClipR[stage]=1;inputSampleR=-1.0+(lastSampleR[stage]*0.381966011250105));
  intermediateR[(spacing*stage)+stage] = inputSampleR;
  //inputSampleR = lastSampleR[stage];
  x = spacing; while (x > 0) (intermediateR[((x-1)*stage)+stage] = intermediateR[(x*stage)+stage]; x=x-1);
  lastSampleR[stage] = intermediateR[stage]; 

stage=stage+1;

);

mode == 2 ? (inputSampleL /= inputGain; inputSampleR /= inputGain); // Atten
mode == 3 ? (inputSampleL = overshootL; inputSampleR = overshootR); // Clips

inputSampleL *= ceiling;
inputSampleR *= ceiling;

spl0 = inputSampleL;
spl1 = inputSampleR;
