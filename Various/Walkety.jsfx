Version: 1.0
desc:Walkety Tape Emulation (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "ChromeOxide" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/ChromeOxide (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Intense
slider2:0.5<0,1,0.01>Bias

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

@slider

A = slider1;
B = slider2;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

bassSampleL;
bassSampleR;
randy;
bias = B/1.31578947368421;
intensity = 0.9+pow(A,2);
iirAmount = pow(1.0-(intensity/(10+(bias*4.0))),2)/overallscale;
bridgerectifier;
trebleGainTrim = 1.0;
indrive = 1.0;
densityA = (intensity*80)+1.0;
noise = intensity/(1.0+bias);
bassGainTrim = 1.0;
glitch = 0.0;
bias *= overallscale;
noise *= overallscale;

(intensity > 1.0) ?
	(
		glitch = intensity-1.0;
		indrive = intensity*intensity;
		bassGainTrim /= (intensity*intensity);
		trebleGainTrim = (intensity+1.0)/2.0;
	);

@sample
inputSampleL = spl0;
inputSampleR = spl1;

inputSampleL *= indrive;
inputSampleR *= indrive;
bassSampleL = inputSampleL;
bassSampleR = inputSampleR;

(flip) ? 
(
    iirSampleAL = (iirSampleAL * (1 - iirAmount)) + (inputSampleL * iirAmount);
    iirSampleAR = (iirSampleAR * (1 - iirAmount)) + (inputSampleR * iirAmount);
    inputSampleL -= iirSampleAL;
    inputSampleR -= iirSampleAR;
)
:
(
    iirSampleBL = (iirSampleBL * (1 - iirAmount)) + (inputSampleL * iirAmount);
    iirSampleBR = (iirSampleBR * (1 - iirAmount)) + (inputSampleR * iirAmount);
    inputSampleL -= iirSampleBL;
    inputSampleR -= iirSampleBR;
);

bassSampleL -= (inputSampleL * (abs(inputSampleL) * glitch) * (abs(inputSampleL) * glitch) );
bassSampleR -= (inputSampleR * (abs(inputSampleR) * glitch) * (abs(inputSampleR) * glitch) );

(flip) ?
(
    iirSampleCL = (iirSampleCL * (1 - iirAmount)) + (bassSampleL * iirAmount);
    iirSampleCR = (iirSampleCR * (1 - iirAmount)) + (bassSampleR * iirAmount);
    bassSampleL = iirSampleCL;
    bassSampleR = iirSampleCR;
)
:
(
    iirSampleDL = (iirSampleDL * (1 - iirAmount)) + (bassSampleL * iirAmount);
    iirSampleDR = (iirSampleDR * (1 - iirAmount)) + (bassSampleR * iirAmount);
    bassSampleL = iirSampleDL;
    bassSampleR = iirSampleDR;
);

flip = !flip;

bridgerectifier = inputSampleL;

randy = bias+((fpdL/UINT32_MAX)*noise);
((randy >= 0.0)&&(randy < 1.0)) ? bridgerectifier = (inputSampleL * randy)+(secondSampleL * (1.0-randy));
((randy >= 1.0)&&(randy < 2.0)) ? bridgerectifier = (secondSampleL * (randy-1.0))+(thirdSampleL * (2.0-randy));
((randy >= 2.0)&&(randy < 3.0)) ? bridgerectifier = (thirdSampleL * (randy-2.0))+(fourthSampleL * (3.0-randy));
((randy >= 3.0)&&(randy < 4.0)) ? bridgerectifier = (fourthSampleL * (randy-3.0))+(fifthSampleL * (4.0-randy));
fifthSampleL = fourthSampleL;
fourthSampleL = thirdSampleL;
thirdSampleL = secondSampleL;
secondSampleL = inputSampleL;

inputSampleL = bridgerectifier;
bridgerectifier = inputSampleR;

randy = bias+((fpdR/UINT32_MAX)*noise);
((randy >= 0.0)&&(randy < 1.0)) ? bridgerectifier = (inputSampleR * randy)+(secondSampleR * (1.0-randy));
((randy >= 1.0)&&(randy < 2.0)) ? bridgerectifier = (secondSampleR * (randy-1.0))+(thirdSampleR * (2.0-randy));
((randy >= 2.0)&&(randy < 3.0)) ? bridgerectifier = (thirdSampleR * (randy-2.0))+(fourthSampleR * (3.0-randy));
((randy >= 3.0)&&(randy < 4.0)) ? bridgerectifier = (fourthSampleR * (randy-3.0))+(fifthSampleR * (4.0-randy));
fifthSampleR = fourthSampleR;
fourthSampleR = thirdSampleR;
thirdSampleR = secondSampleR;
secondSampleR = inputSampleR;

inputSampleR = bridgerectifier;

bridgerectifier = abs(inputSampleL)*densityA;
(bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

bridgerectifier = sin(bridgerectifier);
(inputSampleL > 0) ? inputSampleL = bridgerectifier/densityA
: inputSampleL = -bridgerectifier/densityA;

bridgerectifier = abs(inputSampleR)*densityA;
(bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

bridgerectifier = sin(bridgerectifier);
(inputSampleR > 0) ? inputSampleR = bridgerectifier/densityA
: inputSampleR = -bridgerectifier/densityA;

inputSampleL *= trebleGainTrim;
inputSampleR *= trebleGainTrim;
bassSampleL *= bassGainTrim;
bassSampleR *= bassGainTrim;
inputSampleL += bassSampleL;
inputSampleR += bassSampleR;

spl0 = inputSampleL;
spl1 = inputSampleR;
