NoIndex: true
desc:Octo4 Channel (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "ConsoleLAChannel" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/ConsoleLAChannel (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Treble
slider2:0.5<0,1,0.01>Mid
slider3:0.5<0,1,0.01>Bass
slider4:0.5<0,1,0.01>Pan
slider5:0.5<0,1,0.01>Fader


in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
hullL = freemem; freemem+=225;  
hullR = freemem; freemem+=225;   
pearB = freemem; freemem+=22;  

hullp = 1;

@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;
E = slider5;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

cycleEnd = floor(overallscale);
(cycleEnd < 1) ? cycleEnd = 1;
(cycleEnd > 4) ? cycleEnd = 4;

limit = 4*cycleEnd;
divisor = 2.0/limit;

treble = (A*6.0)-3.0;
midB = (B*6.0)-3.0;
bassB = (C*6.0)-3.0;

(treble < 0.0) ? treble /= 3.0;
(midB < 0.0) ? midB /= 3.0;
(bassB < 0.0) ? bassB /= 3.0;

freqMid = 0.024;
(cycleEnd == 2) ? freqMid = 0.012
: (cycleEnd == 3) ? freqMid = 0.006;

bitshiftL = 0;
bitshiftR = 0;
panControl = (D*2.0)-1.0;
panAttenuation = (1.0-abs(panControl));
panBits = 20; 
(panAttenuation > 0.0) ? panBits = floor(1.0 / panAttenuation);
(panControl > 0.25) ? bitshiftL += panBits;
(panControl < -0.25) ? bitshiftR += panBits;
(bitshiftL < 0) ? bitshiftL = 0; (bitshiftL > 17) ? bitshiftL = 17;
(bitshiftR < 0) ? bitshiftR = 0; (bitshiftR > 17) ? bitshiftR = 17;
gainL = 1.0;
gainR = 1.0;

gainL = (bitshiftL == 17) ? 0.0 :
        (bitshiftL == 16) ? 0.0000152587890625 :
        (bitshiftL == 15) ? 0.000030517578125 :
        (bitshiftL == 14) ? 0.00006103515625 :
        (bitshiftL == 13) ? 0.0001220703125 :
        (bitshiftL == 12) ? 0.000244140625 :
        (bitshiftL == 11) ? 0.00048828125 :
        (bitshiftL == 10) ? 0.0009765625 :
        (bitshiftL == 9)  ? 0.001953125 :
        (bitshiftL == 8)  ? 0.00390625 :
        (bitshiftL == 7)  ? 0.0078125 :
        (bitshiftL == 6)  ? 0.015625 :
        (bitshiftL == 5)  ? 0.03125 :
        (bitshiftL == 4)  ? 0.0625 :
        (bitshiftL == 3)  ? 0.125 :
        (bitshiftL == 2)  ? 0.25 :
        (bitshiftL == 1)  ? 0.5 : 1;
        
gainR = (bitshiftR == 17) ? 0.0 :
        (bitshiftR == 16) ? 0.0000152587890625 :
        (bitshiftR == 15) ? 0.000030517578125 :
        (bitshiftR == 14) ? 0.00006103515625 :
        (bitshiftR == 13) ? 0.0001220703125 :
        (bitshiftR == 12) ? 0.000244140625 :
        (bitshiftR == 11) ? 0.00048828125 :
        (bitshiftR == 10) ? 0.0009765625 :
        (bitshiftR == 9)  ? 0.001953125 :
        (bitshiftR == 8)  ? 0.00390625 :
        (bitshiftR == 7)  ? 0.0078125 :
        (bitshiftR == 6)  ? 0.015625 :
        (bitshiftR == 5)  ? 0.03125 :
        (bitshiftR == 4)  ? 0.0625 :
        (bitshiftR == 3)  ? 0.125 :
        (bitshiftR == 2)  ? 0.25 :
        (bitshiftR == 1)  ? 0.5 : 1;


subTrim = 0.0011 / overallscale;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

gain = E*2;
mid = midB;
bass = bassB;

hullp-=1; (hullp < 0) ? hullp += 60;
hullL[hullp] = hullL[hullp+60] = inputSampleL;
hullR[hullp] = hullR[hullp+60] = inputSampleR;

x = hullp;
bassL = 0.0;
bassR = 0.0;
while (x < hullp+(limit/2)) (
  bassL += hullL[x] * divisor;
  bassR += hullR[x] * divisor;
  x+=1;
);
bassL += bassL * 0.125;
bassR += bassR * 0.125;
while (x < hullp+limit) (
  bassL -= hullL[x] * 0.125 * divisor;
  bassR -= hullR[x] * 0.125 * divisor;
  x+=1;
);
hullL[hullp+20] = hullL[hullp+80] = bassL;
hullR[hullp+20] = hullR[hullp+80] = bassR;
x = hullp+20;
bassL = bassR = 0.0;
while (x < hullp+20+(limit/2)) (
  bassL += hullL[x] * divisor;
  bassR += hullR[x] * divisor;
  x+=1;
);
bassL += bassL * 0.125;
bassR += bassR * 0.125;
while (x < hullp+20+limit) (
  bassL -= hullL[x] * 0.125 * divisor;
  bassR -= hullR[x] * 0.125 * divisor;
  x+=1;
);
hullL[hullp+40] = hullL[hullp+100] = bassL;
hullR[hullp+40] = hullR[hullp+100] = bassR;
x = hullp+40;
bassL = bassR = 0.0;
while (x < hullp+40+(limit/2)) (
  bassL += hullL[x] * divisor;
  bassR += hullR[x] * divisor;
  x+=1;
);
bassL += bassL * 0.125;
bassR += bassR * 0.125;
while (x < hullp+40+limit) (
  bassL -= hullL[x] * 0.125 * divisor;
  bassR -= hullR[x] * 0.125 * divisor;
  x+=1;
);
trebleL = inputSampleL - bassL; inputSampleL = bassL;
trebleR = inputSampleR - bassR; inputSampleR = bassR;

slew = ((bassL - pearB[0]) + pearB[1])*freqMid*0.5;
pearB[0] = bassL = (freqMid * bassL) + ((1.0-freqMid) * (pearB[0] + pearB[1]));
pearB[1] = slew; slew = ((bassR - pearB[2]) + pearB[3])*freqMid*0.5;
pearB[2] = bassR = (freqMid * bassR) + ((1.0-freqMid) * (pearB[2] + pearB[3]));
pearB[3] = slew; slew = ((bassL - pearB[4]) + pearB[5])*freqMid*0.5;
pearB[4] = bassL = (freqMid * bassL) + ((1.0-freqMid) * (pearB[4] + pearB[5]));
pearB[5] = slew; slew = ((bassR - pearB[6]) + pearB[7])*freqMid*0.5;
pearB[6] = bassR = (freqMid * bassR) + ((1.0-freqMid) * (pearB[6] + pearB[7]));
pearB[7] = slew; slew = ((bassL - pearB[8]) + pearB[9])*freqMid*0.5;
pearB[8] = bassL = (freqMid * bassL) + ((1.0-freqMid) * (pearB[8] + pearB[9]));
pearB[9] = slew; slew = ((bassR - pearB[10]) + pearB[11])*freqMid*0.5;
pearB[10] = bassR = (freqMid * bassR) + ((1.0-freqMid) * (pearB[10] + pearB[11]));
pearB[11] = slew; slew = ((bassL - pearB[12]) + pearB[13])*freqMid*0.5;
pearB[12] = bassL = (freqMid * bassL) + ((1.0-freqMid) * (pearB[12] + pearB[13]));
pearB[13] = slew; slew = ((bassR - pearB[14]) + pearB[15])*freqMid*0.5;
pearB[14] = bassR = (freqMid * bassR) + ((1.0-freqMid) * (pearB[14] + pearB[15]));
pearB[15] = slew; slew = ((bassL - pearB[16]) + pearB[17])*freqMid*0.5;
pearB[16] = bassL = (freqMid * bassL) + ((1.0-freqMid) * (pearB[16] + pearB[17]));
pearB[17] = slew; slew = ((bassR - pearB[18]) + pearB[19])*freqMid*0.5;
pearB[18] = bassR = (freqMid * bassR) + ((1.0-freqMid) * (pearB[18] + pearB[19]));
pearB[19] = slew;
midL = inputSampleL - bassL;
midR = inputSampleR - bassR;


w = 0.0; 
(treble > 0.0) ? (
  w = treble; (w > 1.0) ? w = 1.0;
  trebleL = (trebleL*(1.0-w)) + (sin(trebleL*($pi/2))*treble);
  trebleR = (trebleR*(1.0-w)) + (sin(trebleR*($pi/2))*treble);
);
(treble < 0.0) ? (
  (trebleL > 1.0) ? trebleL = 1.0; (trebleL < -1.0) ? trebleL = -1.0;
  (trebleR > 1.0) ? trebleR = 1.0; (trebleR < -1.0) ? trebleR = -1.0;
  w = -treble; (w > 1.0) ? w = 1.0;
  (trebleL > 0) ? trebleL = (trebleL*(1.0-w))+((1.0-cos(trebleL*w))*(1.0-w))
  : trebleL = (trebleL*(1.0-w))+((-1.0+cos(-trebleL*w))*(1.0-w));
  (trebleR > 0) ? trebleR = (trebleR*(1.0-w))+((1.0-cos(trebleR*w))*(1.0-w))
  : trebleR = (trebleR*(1.0-w))+((-1.0+cos(-trebleR*w))*(1.0-w));
); 
(midL > 1.0) ? midL = 1.0; (midL < -1.0) ? midL = -1.0;
(midR > 1.0) ? midR = 1.0; (midR < -1.0) ? midR = -1.0;
(mid > 0.0) ? (
  w = mid; (w > 1.0) ? w = 1.0;
  midL = (midL*(1.0-w)) + (sin(midL*($pi/2))*mid);
  midR = (midR*(1.0-w)) + (sin(midR*($pi/2))*mid);
);
(mid < 0.0) ? (
  w = -mid; (w > 1.0) ? w = 1.0;  
  (midL > 0) ? midL = (midL*(1.0-w))+((1.0-cos(midL*w))*(1.0-w))
  : midL = (midL*(1.0-w))+((-1.0+cos(-midL*w))*(1.0-w));
  (midR > 0) ? midR = (midR*(1.0-w))+((1.0-cos(midR*w))*(1.0-w))
  : midR = (midR*(1.0-w))+((-1.0+cos(-midR*w))*(1.0-w));
); 

(bassL > 1.0) ? bassL = 1.0; (bassL < -1.0) ? bassL = -1.0;
(bassR > 1.0) ? bassR = 1.0; (bassR < -1.0) ? bassR = -1.0;
(bass > 0.0) ? (
  w = bass; (w > 1.0) ? w = 1.0;
  bassL = (bassL*(1.0-w)) + (sin(bassL*($pi/2))*bass);
  bassR = (bassR*(1.0-w)) + (sin(bassR*($pi/2))*bass);
);
(bass < 0.0) ? (
  w = -bass; (w > 1.0) ? w = 1.0;
  (bassL > 0) ? bassL = (bassL*(1.0-w))+((1.0-cos(bassL*w))*(1.0-w))
  : bassL = (bassL*(1.0-w))+((-1.0+cos(-bassL*w))*(1.0-w));
  (bassR > 0) ? bassR = (bassR*(1.0-w))+((1.0-cos(bassR*w))*(1.0-w))
  : bassR = (bassR*(1.0-w))+((-1.0+cos(-bassR*w))*(1.0-w))
); 

inputSampleL = (bassL + midL + trebleL)*gainL*gain;
inputSampleR = (bassR + midR + trebleR)*gainR*gain;

subSampleL = inputSampleL * subTrim;
subSampleR = inputSampleR * subTrim;

scale = 0.5+abs(subSampleL*0.5);
subSampleL = (subAL+(sin(subAL-subSampleL)*scale));
subAL = subSampleL*scale;
scale = 0.5+abs(subSampleR*0.5);
subSampleR = (subAR+(sin(subAR-subSampleR)*scale));
subAR = subSampleR*scale;
scale = 0.5+abs(subSampleL*0.5);
subSampleL = (subBL+(sin(subBL-subSampleL)*scale));
subBL = subSampleL*scale;
scale = 0.5+abs(subSampleR*0.5);
subSampleR = (subBR+(sin(subBR-subSampleR)*scale));
subBR = subSampleR*scale;
scale = 0.5+abs(subSampleL*0.5);
subSampleL = (subCL+(sin(subCL-subSampleL)*scale));
subCL = subSampleL*scale;
scale = 0.5+abs(subSampleR*0.5);
subSampleR = (subCR+(sin(subCR-subSampleR)*scale));
subCR = subSampleR*scale;
(subSampleL > 0.25) ? subSampleL = 0.25;
(subSampleL < -0.25) ? subSampleL = -0.25;
(subSampleR > 0.25) ? subSampleR = 0.25;
(subSampleR < -0.25) ? subSampleR = -0.25;
inputSampleL += (subSampleL*16.0);
inputSampleR += (subSampleR*16.0);

(inputSampleL > 1.097) ? inputSampleL = 1.097;
(inputSampleL < -1.097) ? inputSampleL = -1.097;
(inputSampleR > 1.097) ? inputSampleR = 1.097;
(inputSampleR < -1.097) ? inputSampleR = -1.097;
inputSampleL = ((sin(inputSampleL*abs(inputSampleL))/((abs(inputSampleL) == 0.0) ?1:abs(inputSampleL)))*0.8)+(sin(inputSampleL)*0.2);
inputSampleR = ((sin(inputSampleR*abs(inputSampleR))/((abs(inputSampleR) == 0.0) ?1:abs(inputSampleR)))*0.8)+(sin(inputSampleR)*0.2);

spl0 = inputSampleL;
spl1 = inputSampleR;
