Version: 1.0
desc:Seattlety (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Mackity" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Mackity (MIT License)
  JSFX version released under GPLv3 license

slider1:0.1<0,1,0.01>In Trim
slider2:1<0,1,0.01>Out Pad

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
biquadA = freemem; freemem+=15;
biquadB = freemem; freemem+=15;

@slider

A = slider1;
B = slider2;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

inTrim = A*10.0;
outPad = B;
inTrim *= inTrim;

iirAmountA = 0.001860867/overallscale;
iirAmountB = 0.000287496/overallscale;

biquadB[0] = biquadA[0] = 19160.0 / srate;
biquadA[1] = 0.431684981684982;
biquadB[1] = 1.1582298;

K = tan($pi * biquadA[0]);
norm = 1.0 / (1.0 + K / biquadA[1] + K * K);
biquadA[2] = K * K * norm;
biquadA[3] = 2.0 * biquadA[2];
biquadA[4] = biquadA[2];
biquadA[5] = 2.0 * (K * K - 1.0) * norm;
biquadA[6] = (1.0 - K / biquadA[1] + K * K) * norm;

K = tan($pi * biquadB[0]);
norm = 1.0 / (1.0 + K / biquadB[1] + K * K);
biquadB[2] = K * K * norm;
biquadB[3] = 2.0 * biquadB[2];
biquadB[4] = biquadB[2];
biquadB[5] = 2.0 * (K * K - 1.0) * norm;
biquadB[6] = (1.0 - K / biquadB[1] + K * K) * norm;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

(abs(iirSampleAL)<1.18*10^-37) ? iirSampleAL = 0.0;
iirSampleAL = (iirSampleAL * (1.0 - iirAmountA)) + (inputSampleL * iirAmountA);
inputSampleL -= iirSampleAL;
(abs(iirSampleAR)<1.18*10^-37) ? iirSampleAR = 0.0;
iirSampleAR = (iirSampleAR * (1.0 - iirAmountA)) + (inputSampleR * iirAmountA);
inputSampleR -= iirSampleAR;

(inTrim != 1.0) ? (inputSampleL *= inTrim; inputSampleR *= inTrim;);

outSampleL = biquadA[2]*inputSampleL+biquadA[3]*biquadA[7]+biquadA[4]*biquadA[8]-biquadA[5]*biquadA[9]-biquadA[6]*biquadA[10];
biquadA[8] = biquadA[7]; biquadA[7] = inputSampleL; inputSampleL = outSampleL; biquadA[10] = biquadA[9]; biquadA[9] = inputSampleL;

outSampleR = biquadA[2]*inputSampleR+biquadA[3]*biquadA[11]+biquadA[4]*biquadA[12]-biquadA[5]*biquadA[13]-biquadA[6]*biquadA[14];
biquadA[12] = biquadA[11]; biquadA[11] = inputSampleR; inputSampleR = outSampleR; biquadA[14] = biquadA[13]; biquadA[13] = inputSampleR;

(inputSampleL > 1.0) ? inputSampleL = 1.0;
(inputSampleL < -1.0) ? inputSampleL = -1.0;
inputSampleL -= pow(inputSampleL,5)*0.1768;
(inputSampleR > 1.0) ? inputSampleR = 1.0;
(inputSampleR < -1.0) ? inputSampleR = -1.0;
inputSampleR -= pow(inputSampleR,5)*0.1768;

outSampleL = biquadB[2]*inputSampleL+biquadB[3]*biquadB[7]+biquadB[4]*biquadB[8]-biquadB[5]*biquadB[9]-biquadB[6]*biquadB[10];
biquadB[8] = biquadB[7]; biquadB[7] = inputSampleL; inputSampleL = outSampleL; biquadB[10] = biquadB[9]; biquadB[9] = inputSampleL;

outSampleR = biquadB[2]*inputSampleR+biquadB[3]*biquadB[11]+biquadB[4]*biquadB[12]-biquadB[5]*biquadB[13]-biquadB[6]*biquadB[14];
biquadB[12] = biquadB[11]; biquadB[11] = inputSampleR; inputSampleR = outSampleR; biquadB[14] = biquadB[13]; biquadB[13] = inputSampleR;

(abs(iirSampleBL)<1.18*10^-37) ? iirSampleBL = 0.0;
iirSampleBL = (iirSampleBL * (1.0 - iirAmountB)) + (inputSampleL * iirAmountB);
inputSampleL -= iirSampleBL; 
(abs(iirSampleBR)<1.18*10^-37) ? iirSampleBR = 0.0;
iirSampleBR = (iirSampleBR * (1.0 - iirAmountB)) + (inputSampleR * iirAmountB);
inputSampleR -= iirSampleBR;



(outPad != 1.0) ? (inputSampleL *= outPad; inputSampleR *= outPad;);

spl0 = inputSampleL;
spl1 = inputSampleR;
