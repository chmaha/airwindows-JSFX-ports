Version: 1.1
desc:ReelDeel Tape Emulation (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "ToTape8" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/ToTape8 (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Input
slider2:0.5<0,1,0.01>Tilt
slider3:0.5<0,1,0.01>Shape
slider4:0.5<0,1,0.01>Flutter
slider5:0.5<0,1,0.01>Flutter Speed
slider6:0.5<0,1,0.01>Bias
slider7:0.5<0,1,0.01>Head Bump
slider8:68.75<25,200,0.01>Head Frequency (Hz)
slider9:0.5<0,1,0.01>Output

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
dL = freemem; freemem += 1002; dR = freemem; freemem += 1002;
gslew = freemem; freemem += 28;
hdbA = freemem; freemem += 12; hdbB = freemem; freemem += 12;
intermediateL = freemem; freemem += 16; intermediateR = freemem; freemem += 16;

prevSampL1 = 0;prevSampR1 = 1;threshold1 = 2;prevSampL2 = 3;prevSampR2 = 4;
threshold2 = 5;prevSampL3 = 6;prevSampR3 = 7;threshold3 = 8;prevSampL4 = 9;
prevSampR4 = 10;threshold4 = 11;prevSampL5 = 12;prevSampR5 = 13;threshold5 = 14;
prevSampL6 = 15;prevSampR6 = 16;threshold6 = 17;prevSampL7 = 18;prevSampR7 = 19;
threshold7 = 20;prevSampL8 = 21;prevSampR8 = 22;threshold8 = 23;prevSampL9 = 24;
prevSampR9 = 25;threshold9 = 26;gslew_total = 27;

hdb_freq = 0;hdb_reso = 1;hdb_a0 = 2;hdb_a1 = 3;hdb_a2 = 4;hdb_b1 = 5;
hdb_b2 = 6;hdb_sL1 = 7;hdb_sL2 = 8;hdb_sR1 = 9;hdb_sR2 = 10;hdb_total = 11;

compEncL = 1.0;compDecL = 1.0;
compEncR = 1.0;compDecR = 1.0;

sweepL = $pi;sweepR = $pi;
nextmaxL = 0.5;nextmaxR = 0.5;

UINT32_MAX = 4294967295;
fpdL = rand(UINT32_MAX);
fpdR = rand(UINT32_MAX);

@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;
E = slider5;
F = slider6;
G = slider7;
H = sqrt((slider8-25)/175); // (H*H)*175.0)+25.0
I = slider9;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

spacing = floor(overallscale);
(spacing < 1) ? spacing = 1; (spacing > 16) ? spacing = 16;

inputGain = pow(A*2.0,2.0);

dublyAmount = B*2.0;
outlyAmount = (1.0-B)*-2.0;
(outlyAmount < -1.0) ? outlyAmount = -1.0;
iirEncFreq = (1.0-C)/overallscale;
iirDecFreq = C/overallscale;
iirMidFreq = ((C * 0.618) + 0.382)/overallscale;

flutDepth = pow(D,6)*overallscale*50;
(flutDepth > 498.0) ? flutDepth = 498.0;
flutFrequency = (0.02*pow(E,3))/overallscale;
bias = (F*2.0)-1.0;
underBias = (pow(bias,4)*0.25)/overallscale;
overBias = pow(1.0-bias,3)/overallscale;
(bias > 0.0) ? underBias = 0.0;
(bias < 0.0) ? overBias = 1.0/overallscale;

gslew[threshold9] = overBias;
overBias *= 1.618033988749894848204586;
gslew[threshold8] = overBias;
overBias *= 1.618033988749894848204586;
gslew[threshold7] = overBias;
overBias *= 1.618033988749894848204586;
gslew[threshold6] = overBias;
overBias *= 1.618033988749894848204586;
gslew[threshold5] = overBias;
overBias *= 1.618033988749894848204586;
gslew[threshold4] = overBias;
overBias *= 1.618033988749894848204586;
gslew[threshold3] = overBias;
overBias *= 1.618033988749894848204586;
gslew[threshold2] = overBias;
overBias *= 1.618033988749894848204586;
gslew[threshold1] = overBias;
overBias *= 1.618033988749894848204586;

headBumpDrive = (G*0.1)/overallscale;
headBumpMix = G*0.5;
subCurve = sin(G*$pi);
iirSubFreq = (subCurve*0.008)/overallscale;

hdbA[hdb_freq] = (((H*H)*175.0)+25.0)/srate;
hdbB[hdb_freq] = hdbA[hdb_freq]*0.9375;
hdbB[hdb_reso] = hdbA[hdb_reso] = 0.618033988749894848204586;
hdbB[hdb_a1] = hdbA[hdb_a1] = 0.0;

K = tan($pi * hdbA[hdb_freq]);
norm = 1.0 / (1.0 + K / hdbA[hdb_reso] + K * K);
hdbA[hdb_a0] = K / hdbA[hdb_reso] * norm;
hdbA[hdb_a2] = -hdbA[hdb_a0];
hdbA[hdb_b1] = 2.0 * (K * K - 1.0) * norm;
hdbA[hdb_b2] = (1.0 - K / hdbA[hdb_reso] + K * K) * norm;
K = tan($pi * hdbB[hdb_freq]);
norm = 1.0 / (1.0 + K / hdbB[hdb_reso] + K * K);
hdbB[hdb_a0] = K / hdbB[hdb_reso] * norm;
hdbB[hdb_a2] = -hdbB[hdb_a0];
hdbB[hdb_b1] = 2.0 * (K * K - 1.0) * norm;
hdbB[hdb_b2] = (1.0 - K / hdbB[hdb_reso] + K * K) * norm;

outputGain = I*2.0;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

(inputGain != 1.0) ? (
      inputSampleL *= inputGain;
      inputSampleR *= inputGain;
    );

iirEncL = (iirEncL * (1.0 - iirEncFreq)) + (inputSampleL * iirEncFreq);
highPart = ((inputSampleL-iirEncL)*2.848);
highPart += avgEncL; avgEncL = (inputSampleL-iirEncL)*1.152;
(highPart > 1.0) ? highPart = 1.0; (highPart < -1.0) ? highPart = -1.0;
dubly = abs(highPart);
(dubly > 0.0) ? (
  adjust = log(1.0+(255.0*dubly))/2.40823996531;
  (adjust > 0.0) ? dubly /= adjust;
  compEncL = (compEncL*(1.0-iirEncFreq))+(dubly*iirEncFreq);
  inputSampleL += ((highPart*compEncL)*dublyAmount);
);
iirEncR = (iirEncR * (1.0 - iirEncFreq)) + (inputSampleR * iirEncFreq);
highPart = ((inputSampleR-iirEncR)*2.848);
highPart += avgEncR; avgEncR = (inputSampleR-iirEncR)*1.152;
(highPart > 1.0) ? highPart = 1.0; (highPart < -1.0) ? highPart = -1.0;
dubly = abs(highPart);
(dubly > 0.0) ? (
  adjust = log(1.0+(255.0*dubly))/2.40823996531;
  (adjust > 0.0) ? dubly /= adjust;
  compEncR = (compEncR*(1.0-iirEncFreq))+(dubly*iirEncFreq);
  inputSampleR += ((highPart*compEncR)*dublyAmount);
);

(flutDepth > 0.0) ? (
  (gcount < 0 || gcount > 999) ? gcount = 999;
  dL[gcount] = inputSampleL;
  count = gcount;
  offset = flutDepth + (flutDepth * sin(sweepL));
  sweepL += nextmaxL * flutFrequency;
  (sweepL > ($pi*2.0)) ? (
    sweepL -= $pi*2.0;
    flutA = 0.24 + (fpdL / UINT32_MAX * 0.74);
    fpdL = rand(UINT32_MAX);
    flutB = 0.24 + (fpdL / UINT32_MAX * 0.74);
    (abs(flutA-sin(sweepR+nextmaxR))<abs(flutB-sin(sweepR+nextmaxR))) ? nextmaxL = flutA : nextmaxL = flutB;
  );
  count += floor(offset);
  inputSampleL = (dL[count-((count > 999)?1000:0)] * (1-(offset-floor(offset))));
  inputSampleL += (dL[count+1-((count+1 > 999)?1000:0)] * (offset-floor(offset)));
  dR[gcount] = inputSampleR;
  count = gcount;
  offset = flutDepth + (flutDepth * sin(sweepR));
  sweepR += nextmaxR * flutFrequency;
  (sweepR > ($pi*2.0)) ? (
    sweepR -= $pi*2.0;
    flutA = 0.24 + (fpdR / UINT32_MAX * 0.74);
    fpdR = rand(UINT32_MAX);
    flutB = 0.24 + (fpdR / UINT32_MAX * 0.74);
    (abs(flutA-sin(sweepL+nextmaxL))<abs(flutB-sin(sweepL+nextmaxL))) ? nextmaxR = flutA : nextmaxR = flutB;
  );
  count += floor(offset);
  inputSampleR = (dR[count-((count > 999)?1000:0)] * (1-(offset-floor(offset))));
  inputSampleR += (dR[count+1-((count+1 > 999)?1000:0)] * (offset-floor(offset)));
  gcount=gcount-1;
);

(abs(bias) > 0.001) ? (
   x = 0; while (x < gslew_total) (
    (underBias > 0.0) ? (
      stuck = abs(inputSampleL - (gslew[x]/0.975)) / underBias;
      (stuck < 1.0) ? inputSampleL = (inputSampleL * stuck) + ((gslew[x]/0.975)*(1.0-stuck));
      stuck =  abs(inputSampleR - (gslew[x+1]/0.975)) / underBias;
      (stuck < 1.0) ? inputSampleR = (inputSampleR * stuck) + ((gslew[x+1]/0.975)*(1.0-stuck));
    );
    ((inputSampleL - gslew[x]) > gslew[x+2]) ? inputSampleL = gslew[x] + gslew[x+2];
    (-(inputSampleL - gslew[x]) > gslew[x+2]) ? inputSampleL = gslew[x] - gslew[x+2];
    gslew[x] = inputSampleL * 0.975;
    ((inputSampleR - gslew[x+1]) > gslew[x+2]) ? inputSampleR = gslew[x+1] + gslew[x+2];
    (-(inputSampleR - gslew[x+1]) > gslew[x+2]) ? inputSampleR = gslew[x+1] - gslew[x+2];
    gslew[x+1] = inputSampleR * 0.975;
    x=x+3;
  );
);

iirMidRollerL = (iirMidRollerL * (1.0-iirMidFreq)) + (inputSampleL*iirMidFreq);
HighsSampleL = inputSampleL - iirMidRollerL;
LowsSampleL = iirMidRollerL;
(iirSubFreq > 0.0) ? (
  iirLowCutoffL = (iirLowCutoffL * (1.0-iirSubFreq)) + (LowsSampleL*iirSubFreq);
  LowsSampleL -= iirLowCutoffL;
);
(LowsSampleL > 1.57079633) ? LowsSampleL = 1.57079633;
(LowsSampleL < -1.57079633) ? LowsSampleL = -1.57079633;
LowsSampleL = sin(LowsSampleL);
thinnedHighSample = abs(HighsSampleL)*1.57079633;
(thinnedHighSample > 1.57079633) ? thinnedHighSample = 1.57079633;
thinnedHighSample = 1.0-cos(thinnedHighSample);
(HighsSampleL < 0) ? thinnedHighSample = -thinnedHighSample;
HighsSampleL -= thinnedHighSample;

iirMidRollerR = (iirMidRollerR * (1.0-iirMidFreq)) + (inputSampleR*iirMidFreq);
HighsSampleR = inputSampleR - iirMidRollerR;
LowsSampleR = iirMidRollerR;
(iirSubFreq > 0.0) ? (
  iirLowCutoffR = (iirLowCutoffR * (1.0-iirSubFreq)) + (LowsSampleR*iirSubFreq);
  LowsSampleR -= iirLowCutoffR;
);
(LowsSampleR > 1.57079633) ? LowsSampleR = 1.57079633;
(LowsSampleR < -1.57079633) ? LowsSampleR = -1.57079633;
LowsSampleR = sin(LowsSampleR);
thinnedHighSample = abs(HighsSampleR)*1.57079633;
(thinnedHighSample > 1.57079633) ? thinnedHighSample = 1.57079633;
thinnedHighSample = 1.0-cos(thinnedHighSample);
(HighsSampleR < 0) ? thinnedHighSample = -thinnedHighSample;
HighsSampleR -= thinnedHighSample;

headBumpSampleL = 0.0;
headBumpSampleR = 0.0;
(headBumpMix > 0.0) ? (
  headBumpL += (LowsSampleL * headBumpDrive);
  headBumpL -= (headBumpL * headBumpL * headBumpL * (0.0618/sqrt(overallscale)));
  headBumpR += (LowsSampleR * headBumpDrive);
  headBumpR -= (headBumpR * headBumpR * headBumpR * (0.0618/sqrt(overallscale)));
  headBiqSampleL = (headBumpL * hdbA[hdb_a0]) + hdbA[hdb_sL1];
  hdbA[hdb_sL1] = (headBumpL * hdbA[hdb_a1]) - (headBiqSampleL * hdbA[hdb_b1]) + hdbA[hdb_sL2];
  hdbA[hdb_sL2] = (headBumpL * hdbA[hdb_a2]) - (headBiqSampleL * hdbA[hdb_b2]);
  headBumpSampleL = (headBiqSampleL * hdbB[hdb_a0]) + hdbB[hdb_sL1];
  hdbB[hdb_sL1] = (headBiqSampleL * hdbB[hdb_a1]) - (headBumpSampleL * hdbB[hdb_b1]) + hdbB[hdb_sL2];
  hdbB[hdb_sL2] = (headBiqSampleL * hdbB[hdb_a2]) - (headBumpSampleL * hdbB[hdb_b2]);
  headBiqSampleR = (headBumpR * hdbA[hdb_a0]) + hdbA[hdb_sR1];
  hdbA[hdb_sR1] = (headBumpR * hdbA[hdb_a1]) - (headBiqSampleR * hdbA[hdb_b1]) + hdbA[hdb_sR2];
  hdbA[hdb_sR2] = (headBumpR * hdbA[hdb_a2]) - (headBiqSampleR * hdbA[hdb_b2]);
  headBumpSampleR = (headBiqSampleR * hdbB[hdb_a0]) + hdbB[hdb_sR1];
  hdbB[hdb_sR1] = (headBiqSampleR * hdbB[hdb_a1]) - (headBumpSampleR * hdbB[hdb_b1]) + hdbB[hdb_sR2];
  hdbB[hdb_sR2] = (headBiqSampleR * hdbB[hdb_a2]) - (headBumpSampleR * hdbB[hdb_b2]);
);

inputSampleL = LowsSampleL + HighsSampleL + (headBumpSampleL * headBumpMix);
inputSampleR = LowsSampleR + HighsSampleR + (headBumpSampleR * headBumpMix);

iirDecL = (iirDecL * (1.0 - iirDecFreq)) + (inputSampleL * iirDecFreq);
highPart = ((inputSampleL-iirDecL)*2.628);
highPart += avgDecL; avgDecL = (inputSampleL-iirDecL)*1.372;
(highPart > 1.0) ? highPart = 1.0; (highPart < -1.0) ? highPart = -1.0;
dubly = abs(highPart);
(dubly > 0.0) ? (
  adjust = log(1.0+(255.0*dubly))/2.40823996531;
  (adjust > 0.0) ? dubly /= adjust;
  compDecL = (compDecL*(1.0-iirDecFreq))+(dubly*iirDecFreq);
  inputSampleL += ((highPart*compDecL)*outlyAmount);
);
iirDecR = (iirDecR * (1.0 - iirDecFreq)) + (inputSampleR * iirDecFreq);
highPart = ((inputSampleR-iirDecR)*2.628);
highPart += avgDecR; avgDecR = (inputSampleR-iirDecR)*1.372;
(highPart > 1.0) ? highPart = 1.0; (highPart < -1.0) ? highPart = -1.0;
dubly = abs(highPart);
(dubly > 0.0) ? (
  adjust = log(1.0+(255.0*dubly))/2.40823996531;
  (adjust > 0.0) ? dubly /= adjust;
  compDecR = (compDecR*(1.0-iirDecFreq))+(dubly*iirDecFreq);
  inputSampleR += ((highPart*compDecR)*outlyAmount);
);


(outputGain != 1.0) ? (
  inputSampleL *= outputGain;
  inputSampleR *= outputGain;
);

(inputSampleL > 4.0) ? inputSampleL = 4.0; (inputSampleL < -4.0) ? inputSampleL = -4.0;
(wasPosClipL == 1) ? (
  (inputSampleL<lastSampleL) ? lastSampleL=0.7058208+(inputSampleL*0.2609148)
  : lastSampleL = 0.2491717+(lastSampleL*0.7390851);
); wasPosClipL = 0;
(inputSampleL>0.9549925859) ? (wasPosClipL=1;inputSampleL=0.7058208+(lastSampleL*0.2609148));
(wasNegClipL == 1) ? (
  (inputSampleL > lastSampleL) ? lastSampleL=-0.7058208+(inputSampleL*0.2609148)
  : lastSampleL=-0.2491717+(lastSampleL*0.7390851);
); wasNegClipL = 0;
(inputSampleL<-0.9549925859) ? (wasNegClipL=1;inputSampleL=-0.7058208+(lastSampleL*0.2609148));
intermediateL[spacing] = inputSampleL;
    inputSampleL = lastSampleL;
 x = spacing; while (x > 0) (intermediateL[x-1] = intermediateL[x];x=x-1);
lastSampleL = intermediateL[0];

(inputSampleR > 4.0) ? inputSampleR = 4.0; (inputSampleR < -4.0) ? inputSampleR = -4.0;
(wasPosClipR == 1) ? (
  (inputSampleR<lastSampleR) ? lastSampleR=0.7058208+(inputSampleR*0.2609148)
  : lastSampleR = 0.2491717+(lastSampleR*0.7390851);
); wasPosClipR = 0;
(inputSampleR>0.9549925859) ? (wasPosClipR=1;inputSampleR=0.7058208+(lastSampleR*0.2609148));
(wasNegClipR == 1) ? (
  (inputSampleR > lastSampleR) ? lastSampleR=-0.7058208+(inputSampleR*0.2609148)
  : lastSampleR=-0.2491717+(lastSampleR*0.7390851);
); wasNegClipR = 0;
(inputSampleR<-0.9549925859) ? (wasNegClipR=1;inputSampleR=-0.7058208+(lastSampleR*0.2609148));
intermediateR[spacing] = inputSampleR;
    inputSampleR = lastSampleR;
x = spacing; while (x > 0) (intermediateR[x-1] = intermediateR[x];x=x-1);
lastSampleR = intermediateR[0];

spl0 = inputSampleL;
spl1 = inputSampleR;
