Version: 1.0
desc:TripleCurve EQ (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Parametric" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Parametric (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Treble Freq
slider2:0.5<0,1,0.01>Treble Amount
slider3:0.5<0,1,0.01>Treble Bandwidth
slider4:0.5<0,1,0.01>High-Mid Freq
slider5:0.5<0,1,0.01>High-Mid Amount
slider6:0.5<0,1,0.01>High-Mid Bandwidth
slider7:0.5<0,1,0.01>Low-Mid Freq
slider8:0.5<0,1,0.01>Low-Mid Amount
slider9:0.5<0,1,0.01>Low-Mid Bandwidth
slider10:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;

high = freemem; freemem += 32;
hmid = freemem; freemem += 32;
lmid = freemem; freemem += 32;

biqs_freq = 0; biqs_reso = 1; biqs_level = 2;
biqs_nonlin = 3; biqs_temp = 4; biqs_dis = 5;
biqs_a0 = 6; biqs_a1 = 7; biqs_b1 = 8; biqs_b2 = 9;
biqs_c0 = 10; biqs_c1 = 11; biqs_d1 = 12; biqs_d2 = 13;
biqs_e0 = 14; biqs_e1 = 15; biqs_f1 = 16; biqs_f2 = 17;
biqs_aL1 = 18; biqs_aL2 = 19; biqs_aR1 = 20; biqs_aR2 = 21;
biqs_cL1 = 22; biqs_cL2 = 23; biqs_cR1 = 24; biqs_cR2 = 25;
biqs_eL1 = 26; biqs_eL2 = 27; biqs_eR1 = 28; biqs_eR2 = 29;
biqs_outL = 30; biqs_outR = 31;

@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;
E = slider5;
F = slider6;
G = slider7;
H = slider8;
I = slider9;
J = slider10;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

high[biqs_freq] = (((pow(A,3)*14500.0)+1500.0)/srate);
(high[biqs_freq] < 0.0001) ? high[biqs_freq] = 0.0001;
high[biqs_nonlin] = B;
high[biqs_level] = (high[biqs_nonlin]*2.0)-1.0;
(high[biqs_level] > 0.0) ? high[biqs_level] *= 2.0;
high[biqs_reso] = ((0.5+(high[biqs_nonlin]*0.5)+sqrt(high[biqs_freq]))-(1.0-pow(1.0-C,2.0)))+0.5+(high[biqs_nonlin]*0.5);
K = tan($pi * high[biqs_freq]);
norm = 1.0 / (1.0 + K / (high[biqs_reso]*1.93185165) + K * K);
high[biqs_a0] = K / (high[biqs_reso]*1.93185165) * norm;
high[biqs_b1] = 2.0 * (K * K - 1.0) * norm;
high[biqs_b2] = (1.0 - K / (high[biqs_reso]*1.93185165) + K * K) * norm;
norm = 1.0 / (1.0 + K / (high[biqs_reso]*0.70710678) + K * K);
high[biqs_c0] = K / (high[biqs_reso]*0.70710678) * norm;
high[biqs_d1] = 2.0 * (K * K - 1.0) * norm;
high[biqs_d2] = (1.0 - K / (high[biqs_reso]*0.70710678) + K * K) * norm;
norm = 1.0 / (1.0 + K / (high[biqs_reso]*0.51763809) + K * K);
high[biqs_e0] = K / (high[biqs_reso]*0.51763809) * norm;
high[biqs_f1] = 2.0 * (K * K - 1.0) * norm;
high[biqs_f2] = (1.0 - K / (high[biqs_reso]*0.51763809) + K * K) * norm;

hmid[biqs_freq] = (((pow(D,3)*6400.0)+600.0)/srate);
(hmid[biqs_freq] < 0.0001) ? hmid[biqs_freq] = 0.0001;
hmid[biqs_nonlin] = E;
hmid[biqs_level] = (hmid[biqs_nonlin]*2.0)-1.0;
(hmid[biqs_level] > 0.0) ? hmid[biqs_level] *= 2.0;
hmid[biqs_reso] = ((0.5+(hmid[biqs_nonlin]*0.5)+sqrt(hmid[biqs_freq]))-(1.0-pow(1.0-F,2.0)))+0.5+(hmid[biqs_nonlin]*0.5);
K = tan($pi * hmid[biqs_freq]);
norm = 1.0 / (1.0 + K / (hmid[biqs_reso]*1.93185165) + K * K);
hmid[biqs_a0] = K / (hmid[biqs_reso]*1.93185165) * norm;
hmid[biqs_b1] = 2.0 * (K * K - 1.0) * norm;
hmid[biqs_b2] = (1.0 - K / (hmid[biqs_reso]*1.93185165) + K * K) * norm;
norm = 1.0 / (1.0 + K / (hmid[biqs_reso]*0.70710678) + K * K);
hmid[biqs_c0] = K / (hmid[biqs_reso]*0.70710678) * norm;
hmid[biqs_d1] = 2.0 * (K * K - 1.0) * norm;
hmid[biqs_d2] = (1.0 - K / (hmid[biqs_reso]*0.70710678) + K * K) * norm;
norm = 1.0 / (1.0 + K / (hmid[biqs_reso]*0.51763809) + K * K);
hmid[biqs_e0] = K / (hmid[biqs_reso]*0.51763809) * norm;
hmid[biqs_f1] = 2.0 * (K * K - 1.0) * norm;
hmid[biqs_f2] = (1.0 - K / (hmid[biqs_reso]*0.51763809) + K * K) * norm;

lmid[biqs_freq] = (((pow(G,3)*2200.0)+20.0)/srate);
(lmid[biqs_freq] < 0.00001) ? lmid[biqs_freq] = 0.00001;
lmid[biqs_nonlin] = H;
lmid[biqs_level] = (lmid[biqs_nonlin]*2.0)-1.0;
(lmid[biqs_level] > 0.0) ? lmid[biqs_level] *= 2.0;
lmid[biqs_reso] = ((0.5+(lmid[biqs_nonlin]*0.5)+sqrt(lmid[biqs_freq]))-(1.0-pow(1.0-I,2.0)))+0.5+(lmid[biqs_nonlin]*0.5);
K = tan($pi * lmid[biqs_freq]);
norm = 1.0 / (1.0 + K / (lmid[biqs_reso]*1.93185165) + K * K);
lmid[biqs_a0] = K / (lmid[biqs_reso]*1.93185165) * norm;
lmid[biqs_b1] = 2.0 * (K * K - 1.0) * norm;
lmid[biqs_b2] = (1.0 - K / (lmid[biqs_reso]*1.93185165) + K * K) * norm;
norm = 1.0 / (1.0 + K / (lmid[biqs_reso]*0.70710678) + K * K);
lmid[biqs_c0] = K / (lmid[biqs_reso]*0.70710678) * norm;
lmid[biqs_d1] = 2.0 * (K * K - 1.0) * norm;
lmid[biqs_d2] = (1.0 - K / (lmid[biqs_reso]*0.70710678) + K * K) * norm;
norm = 1.0 / (1.0 + K / (lmid[biqs_reso]*0.51763809) + K * K);
lmid[biqs_e0] = K / (lmid[biqs_reso]*0.51763809) * norm;
lmid[biqs_f1] = 2.0 * (K * K - 1.0) * norm;
lmid[biqs_f2] = (1.0 - K / (lmid[biqs_reso]*0.51763809) + K * K) * norm;

wet = J;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

high[biqs_outL] = inputSampleL * abs(high[biqs_level]);
high[biqs_dis] = abs(high[biqs_a0] * (1.0+(high[biqs_outL]*high[biqs_nonlin])));
(high[biqs_dis] > 1.0) ? high[biqs_dis] = 1.0;
high[biqs_temp] = (high[biqs_outL] * high[biqs_dis]) + high[biqs_aL1];
high[biqs_aL1] = high[biqs_aL2] - (high[biqs_temp]*high[biqs_b1]);
high[biqs_aL2] = (high[biqs_outL] * -high[biqs_dis]) - (high[biqs_temp]*high[biqs_b2]);
high[biqs_outL] = high[biqs_temp];
high[biqs_dis] = abs(high[biqs_c0] * (1.0+(high[biqs_outL]*high[biqs_nonlin])));
(high[biqs_dis] > 1.0) ? high[biqs_dis] = 1.0;
high[biqs_temp] = (high[biqs_outL] * high[biqs_dis]) + high[biqs_cL1];
high[biqs_cL1] = high[biqs_cL2] - (high[biqs_temp]*high[biqs_d1]);
high[biqs_cL2] = (high[biqs_outL] * -high[biqs_dis]) - (high[biqs_temp]*high[biqs_d2]);
high[biqs_outL] = high[biqs_temp];
high[biqs_dis] = abs(high[biqs_e0] * (1.0+(high[biqs_outL]*high[biqs_nonlin])));
(high[biqs_dis] > 1.0) ? high[biqs_dis] = 1.0;
high[biqs_temp] = (high[biqs_outL] * high[biqs_dis]) + high[biqs_eL1];
high[biqs_eL1] = high[biqs_eL2] - (high[biqs_temp]*high[biqs_f1]);
high[biqs_eL2] = (high[biqs_outL] * -high[biqs_dis]) - (high[biqs_temp]*high[biqs_f2]);
high[biqs_outL] = high[biqs_temp]; high[biqs_outL] *= high[biqs_level];
(high[biqs_level] > 1.0) ? high[biqs_outL] *= high[biqs_level];

hmid[biqs_outL] = inputSampleL * abs(hmid[biqs_level]);
hmid[biqs_dis] = abs(hmid[biqs_a0] * (1.0+(hmid[biqs_outL]*hmid[biqs_nonlin])));
(hmid[biqs_dis] > 1.0) ? hmid[biqs_dis] = 1.0;
hmid[biqs_temp] = (hmid[biqs_outL] * hmid[biqs_dis]) + hmid[biqs_aL1];
hmid[biqs_aL1] = hmid[biqs_aL2] - (hmid[biqs_temp]*hmid[biqs_b1]);
hmid[biqs_aL2] = (hmid[biqs_outL] * -hmid[biqs_dis]) - (hmid[biqs_temp]*hmid[biqs_b2]);
hmid[biqs_outL] = hmid[biqs_temp];
hmid[biqs_dis] = abs(hmid[biqs_c0] * (1.0+(hmid[biqs_outL]*hmid[biqs_nonlin])));
(hmid[biqs_dis] > 1.0) ? hmid[biqs_dis] = 1.0;
hmid[biqs_temp] = (hmid[biqs_outL] * hmid[biqs_dis]) + hmid[biqs_cL1];
hmid[biqs_cL1] = hmid[biqs_cL2] - (hmid[biqs_temp]*hmid[biqs_d1]);
hmid[biqs_cL2] = (hmid[biqs_outL] * -hmid[biqs_dis]) - (hmid[biqs_temp]*hmid[biqs_d2]);
hmid[biqs_outL] = hmid[biqs_temp];
hmid[biqs_dis] = abs(hmid[biqs_e0] * (1.0+(hmid[biqs_outL]*hmid[biqs_nonlin])));
(hmid[biqs_dis] > 1.0) ? hmid[biqs_dis] = 1.0;
hmid[biqs_temp] = (hmid[biqs_outL] * hmid[biqs_dis]) + hmid[biqs_eL1];
hmid[biqs_eL1] = hmid[biqs_eL2] - (hmid[biqs_temp]*hmid[biqs_f1]);
hmid[biqs_eL2] = (hmid[biqs_outL] * -hmid[biqs_dis]) - (hmid[biqs_temp]*hmid[biqs_f2]);
hmid[biqs_outL] = hmid[biqs_temp]; hmid[biqs_outL] *= hmid[biqs_level];
(hmid[biqs_level] > 1.0) ? hmid[biqs_outL] *= hmid[biqs_level];

lmid[biqs_outL] = inputSampleL * abs(lmid[biqs_level]);
lmid[biqs_dis] = abs(lmid[biqs_a0] * (1.0+(lmid[biqs_outL]*lmid[biqs_nonlin])));
(lmid[biqs_dis] > 1.0) ? lmid[biqs_dis] = 1.0;
lmid[biqs_temp] = (lmid[biqs_outL] * lmid[biqs_dis]) + lmid[biqs_aL1];
lmid[biqs_aL1] = lmid[biqs_aL2] - (lmid[biqs_temp]*lmid[biqs_b1]);
lmid[biqs_aL2] = (lmid[biqs_outL] * -lmid[biqs_dis]) - (lmid[biqs_temp]*lmid[biqs_b2]);
lmid[biqs_outL] = lmid[biqs_temp];
lmid[biqs_dis] = abs(lmid[biqs_c0] * (1.0+(lmid[biqs_outL]*lmid[biqs_nonlin])));
(lmid[biqs_dis] > 1.0) ? lmid[biqs_dis] = 1.0;
lmid[biqs_temp] = (lmid[biqs_outL] * lmid[biqs_dis]) + lmid[biqs_cL1];
lmid[biqs_cL1] = lmid[biqs_cL2] - (lmid[biqs_temp]*lmid[biqs_d1]);
lmid[biqs_cL2] = (lmid[biqs_outL] * -lmid[biqs_dis]) - (lmid[biqs_temp]*lmid[biqs_d2]);
lmid[biqs_outL] = lmid[biqs_temp];
lmid[biqs_dis] = abs(lmid[biqs_e0] * (1.0+(lmid[biqs_outL]*lmid[biqs_nonlin])));
(lmid[biqs_dis] > 1.0) ? lmid[biqs_dis] = 1.0;
lmid[biqs_temp] = (lmid[biqs_outL] * lmid[biqs_dis]) + lmid[biqs_eL1];
lmid[biqs_eL1] = lmid[biqs_eL2] - (lmid[biqs_temp]*lmid[biqs_f1]);
lmid[biqs_eL2] = (lmid[biqs_outL] * -lmid[biqs_dis]) - (lmid[biqs_temp]*lmid[biqs_f2]);
lmid[biqs_outL] = lmid[biqs_temp]; lmid[biqs_outL] *= lmid[biqs_level];
(lmid[biqs_level] > 1.0) ? lmid[biqs_outL] *= lmid[biqs_level];

high[biqs_outR] = inputSampleR * abs(high[biqs_level]);
high[biqs_dis] = abs(high[biqs_a0] * (1.0+(high[biqs_outR]*high[biqs_nonlin])));
(high[biqs_dis] > 1.0) ? high[biqs_dis] = 1.0;
high[biqs_temp] = (high[biqs_outR] * high[biqs_dis]) + high[biqs_aR1];
high[biqs_aR1] = high[biqs_aR2] - (high[biqs_temp]*high[biqs_b1]);
high[biqs_aR2] = (high[biqs_outR] * -high[biqs_dis]) - (high[biqs_temp]*high[biqs_b2]);
high[biqs_outR] = high[biqs_temp];
high[biqs_dis] = abs(high[biqs_c0] * (1.0+(high[biqs_outR]*high[biqs_nonlin])));
(high[biqs_dis] > 1.0) ? high[biqs_dis] = 1.0;
high[biqs_temp] = (high[biqs_outR] * high[biqs_dis]) + high[biqs_cR1];
high[biqs_cR1] = high[biqs_cR2] - (high[biqs_temp]*high[biqs_d1]);
high[biqs_cR2] = (high[biqs_outR] * -high[biqs_dis]) - (high[biqs_temp]*high[biqs_d2]);
high[biqs_outR] = high[biqs_temp];
high[biqs_dis] = abs(high[biqs_e0] * (1.0+(high[biqs_outR]*high[biqs_nonlin])));
(high[biqs_dis] > 1.0) ? high[biqs_dis] = 1.0;
high[biqs_temp] = (high[biqs_outR] * high[biqs_dis]) + high[biqs_eR1];
high[biqs_eR1] = high[biqs_eR2] - (high[biqs_temp]*high[biqs_f1]);
high[biqs_eR2] = (high[biqs_outR] * -high[biqs_dis]) - (high[biqs_temp]*high[biqs_f2]);
high[biqs_outR] = high[biqs_temp]; high[biqs_outR] *= high[biqs_level];
(high[biqs_level] > 1.0) ? high[biqs_outR] *= high[biqs_level];

hmid[biqs_outR] = inputSampleR * abs(hmid[biqs_level]);
hmid[biqs_dis] = abs(hmid[biqs_a0] * (1.0+(hmid[biqs_outR]*hmid[biqs_nonlin])));
(hmid[biqs_dis] > 1.0) ? hmid[biqs_dis] = 1.0;
hmid[biqs_temp] = (hmid[biqs_outR] * hmid[biqs_dis]) + hmid[biqs_aR1];
hmid[biqs_aR1] = hmid[biqs_aR2] - (hmid[biqs_temp]*hmid[biqs_b1]);
hmid[biqs_aR2] = (hmid[biqs_outR] * -hmid[biqs_dis]) - (hmid[biqs_temp]*hmid[biqs_b2]);
hmid[biqs_outR] = hmid[biqs_temp];
hmid[biqs_dis] = abs(hmid[biqs_c0] * (1.0+(hmid[biqs_outR]*hmid[biqs_nonlin])));
(hmid[biqs_dis] > 1.0) ? hmid[biqs_dis] = 1.0;
hmid[biqs_temp] = (hmid[biqs_outR] * hmid[biqs_dis]) + hmid[biqs_cR1];
hmid[biqs_cR1] = hmid[biqs_cR2] - (hmid[biqs_temp]*hmid[biqs_d1]);
hmid[biqs_cR2] = (hmid[biqs_outR] * -hmid[biqs_dis]) - (hmid[biqs_temp]*hmid[biqs_d2]);
hmid[biqs_outR] = hmid[biqs_temp];
hmid[biqs_dis] = abs(hmid[biqs_e0] * (1.0+(hmid[biqs_outR]*hmid[biqs_nonlin])));
(hmid[biqs_dis] > 1.0) ? hmid[biqs_dis] = 1.0;
hmid[biqs_temp] = (hmid[biqs_outR] * hmid[biqs_dis]) + hmid[biqs_eR1];
hmid[biqs_eR1] = hmid[biqs_eR2] - (hmid[biqs_temp]*hmid[biqs_f1]);
hmid[biqs_eR2] = (hmid[biqs_outR] * -hmid[biqs_dis]) - (hmid[biqs_temp]*hmid[biqs_f2]);
hmid[biqs_outR] = hmid[biqs_temp]; hmid[biqs_outR] *= hmid[biqs_level];
(hmid[biqs_level] > 1.0) ? hmid[biqs_outR] *= hmid[biqs_level];

lmid[biqs_outR] = inputSampleR * abs(lmid[biqs_level]);
lmid[biqs_dis] = abs(lmid[biqs_a0] * (1.0+(lmid[biqs_outR]*lmid[biqs_nonlin])));
(lmid[biqs_dis] > 1.0) ? lmid[biqs_dis] = 1.0;
lmid[biqs_temp] = (lmid[biqs_outR] * lmid[biqs_dis]) + lmid[biqs_aR1];
lmid[biqs_aR1] = lmid[biqs_aR2] - (lmid[biqs_temp]*lmid[biqs_b1]);
lmid[biqs_aR2] = (lmid[biqs_outR] * -lmid[biqs_dis]) - (lmid[biqs_temp]*lmid[biqs_b2]);
lmid[biqs_outR] = lmid[biqs_temp];
lmid[biqs_dis] = abs(lmid[biqs_c0] * (1.0+(lmid[biqs_outR]*lmid[biqs_nonlin])));
(lmid[biqs_dis] > 1.0) ? lmid[biqs_dis] = 1.0;
lmid[biqs_temp] = (lmid[biqs_outR] * lmid[biqs_dis]) + lmid[biqs_cR1];
lmid[biqs_cR1] = lmid[biqs_cR2] - (lmid[biqs_temp]*lmid[biqs_d1]);
lmid[biqs_cR2] = (lmid[biqs_outR] * -lmid[biqs_dis]) - (lmid[biqs_temp]*lmid[biqs_d2]);
lmid[biqs_outR] = lmid[biqs_temp];
lmid[biqs_dis] = abs(lmid[biqs_e0] * (1.0+(lmid[biqs_outR]*lmid[biqs_nonlin])));
(lmid[biqs_dis] > 1.0) ? lmid[biqs_dis] = 1.0;
lmid[biqs_temp] = (lmid[biqs_outR] * lmid[biqs_dis]) + lmid[biqs_eR1];
lmid[biqs_eR1] = lmid[biqs_eR2] - (lmid[biqs_temp]*lmid[biqs_f1]);
lmid[biqs_eR2] = (lmid[biqs_outR] * -lmid[biqs_dis]) - (lmid[biqs_temp]*lmid[biqs_f2]);
lmid[biqs_outR] = lmid[biqs_temp]; lmid[biqs_outR] *= lmid[biqs_level];
(lmid[biqs_level] > 1.0) ? lmid[biqs_outR] *= lmid[biqs_level];

parametric = high[biqs_outL] + hmid[biqs_outL] + lmid[biqs_outL];
inputSampleL += (parametric * wet);
parametric = high[biqs_outR] + hmid[biqs_outR] + lmid[biqs_outR];
inputSampleR += (parametric * wet);

spl0 = inputSampleL;
spl1 = inputSampleR;
