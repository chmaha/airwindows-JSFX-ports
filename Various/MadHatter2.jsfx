Version: 1.0
desc:Mad Hatter 2 Compressor (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Pop3" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Pop3 (MIT License)
  JSFX version released under GPLv3 license

slider1:1<0,1,0.01>Comp Threshold
slider2:0.5<0,1,0.01>Comp Ratio
slider3:0.5<0,1,0.01>Comp Attack
slider4:0.5<0,1,0.01>Comp Release
slider5:0<0,1,0.01>Gate Threshold
slider6:0.5<0,1,0.01>Gate Ratio
slider7:0.5<0,1,0.01>Gate Sustain
slider8:0.5<0,1,0.01>Gate Release

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

popCompL = 1.0;
popCompR = 1.0;
popGate = 1.0;

@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;
E = slider5;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

compThresh = pow(A,4);
compRatio = 1.0-pow(1.0-B,2);
compAttack = 1.0/(((pow(C,3)*5000.0)+500.0)*overallscale);
compRelease = 1.0/(((pow(D,5)*50000.0)+500.0)*overallscale);

gateThresh = pow(E,4);
gateRatio = 1.0-pow(1.0-F,2);
gateSustain = $pi/2 * pow(G+1.0,4.0);
gateRelease = 1.0/(((pow(H,5)*500000.0)+500.0)*overallscale);

@sample
inputSampleL = spl0;
inputSampleR = spl1;

(abs(inputSampleL) > compThresh) ? (
    popCompL -= (popCompL * compAttack);
    popCompL += ((compThresh / abs(inputSampleL))*compAttack);
) : popCompL = (popCompL*(1.0-compRelease))+compRelease;
(abs(inputSampleR) > compThresh) ? (
    popCompR -= (popCompR * compAttack);
    popCompR += ((compThresh / abs(inputSampleR))*compAttack);
) : popCompR = (popCompR*(1.0-compRelease))+compRelease;
(popCompL > popCompR) ? popCompL -= (popCompL * compAttack);
(popCompR > popCompL) ? popCompR -= (popCompR * compAttack);
(abs(inputSampleL) > gateThresh) ? popGate = gateSustain
: (abs(inputSampleR) > gateThresh) ? popGate = gateSustain
: popGate *= (1.0-gateRelease);
(popGate < 0.0) ? popGate = 0.0;
popCompL = max(min(popCompL,1.0),0.0);
popCompR = max(min(popCompR,1.0),0.0);
inputSampleL *= ((1.0-compRatio)+(popCompL*compRatio));
inputSampleR *= ((1.0-compRatio)+(popCompR*compRatio));
(popGate < $pi/2) ? (
    inputSampleL *= ((1.0-gateRatio)+(sin(popGate)*gateRatio));
    inputSampleR *= ((1.0-gateRatio)+(sin(popGate)*gateRatio));
);

spl0 = inputSampleL;
spl1 = inputSampleR;
